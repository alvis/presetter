build: run-s clean build:*
build:typescript: run-s build:typescript:mjs
build:typescript:mjs: run-s build:typescript:mjs:*
build:typescript:mjs:tsc: tsc -p tsconfig.build.json
build:typescript:mjs:alias: run-s build:typescript:mjs:alias:*
build:typescript:mjs:alias:lib: tsc-alias --resolve-full-paths --dir {output}
build:typescript:mjs:alias:root: tsc-alias --resolve-full-paths --dir .
build:typescript:mjs:fix: tsc-esm-fix --sourceMap --target {output}
clean: run-p clean:**
clean:lib: shx rm -rf {output}
clean:coverage: shx rm -rf coverage
develop:
  cross-env-shell NODE_ENV=local ts-node-dev --transpile-only --require tsconfig-paths/register
  --debounce 250 --respawn --clear --no-notify --tree-kill --dedupe --ignore-watch
  node_modules -- $@
lint: run-s "lint:* -- {source} {test}"
lint:eslint: eslint --fix --format stylish --no-error-on-unmatched-pattern --ext js,jsx,ts,tsx
lint:fixme: leasot --skip-unsupported --exit-nicely package.json
lint:prettier: prettier --write --no-error-on-unmatched-pattern
prepare: run-s setup build
prepublishOnly: run-s coverage lint
release: standard-version --preset metahub
setup: run-s setup:*
setup:husky: (husky install && run-p setup:husky:*) || true
setup:husky:pre-commit: husky set .husky/pre-commit 'npx lint-staged --concurrent=false'
setup:presetter: presetter bootstrap
stage: run-p "stage:* -- {@}" --
stage:lint: run-s "lint:prettier -- {@}" --
start: run-p "build:typescript -- -w" "build:types:* -- -w"
test: cross-env NODE_OPTIONS="${NODE_OPTIONS} --experimental-vm-modules" jest --config .jestrc.json --no-cache --passWithNoTests --verbose --logHeapUsage
coverage: npm run --if-present test -- --coverage --collectCoverageFrom='{source}/**/*.[jt]s'
watch: npm run --if-present test -- --watch
