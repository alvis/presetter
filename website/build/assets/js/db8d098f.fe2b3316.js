"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[5050],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},9275:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"tutorials/monorepo-setup","title":"Monorepo Setup","description":"Configure a multi-package workspace with shared Presetter configurations","source":"@site/docs/tutorials/monorepo-setup.md","sourceDirName":"tutorials","slug":"/tutorials/monorepo-setup","permalink":"/presetter/docs/tutorials/monorepo-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/tutorials/monorepo-setup.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Monorepo Setup","description":"Configure a multi-package workspace with shared Presetter configurations"},"sidebar":"tutorialSidebar","previous":{"title":"Migrating Existing Projects","permalink":"/presetter/docs/tutorials/existing-project"},"next":{"title":"Creating Custom Presets","permalink":"/presetter/docs/tutorials/custom-presets"}}');var r=s(4848),i=s(8453);const a={sidebar_position:4,title:"Monorepo Setup",description:"Configure a multi-package workspace with shared Presetter configurations"},o="Monorepo Setup \ud83c\udfe2",l={},p=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create Monorepo Structure",id:"step-1-create-monorepo-structure",level:2},{value:"Step 2: Configure Root Presetter Setup",id:"step-2-configure-root-presetter-setup",level:2},{value:"Step 3: Create Package Templates",id:"step-3-create-package-templates",level:2},{value:"Library Package Template",id:"library-package-template",level:3},{value:"React App Package",id:"react-app-package",level:3},{value:"Step 4: Configure Cross-Package Dependencies",id:"step-4-configure-cross-package-dependencies",level:2},{value:"Update Root Package.json",id:"update-root-packagejson",level:3},{value:"Bootstrap All Packages",id:"bootstrap-all-packages",level:3},{value:"Step 5: Build Orchestration",id:"step-5-build-orchestration",level:2},{value:"Sequential Build (Dependencies First)",id:"sequential-build-dependencies-first",level:3},{value:"Parallel Development",id:"parallel-development",level:3},{value:"Step 6: Shared Configuration Management",id:"step-6-shared-configuration-management",level:2},{value:"ESLint Configuration Sharing",id:"eslint-configuration-sharing",level:3},{value:"Use Shared Config in Packages",id:"use-shared-config-in-packages",level:3},{value:"Step 7: Testing Strategy",id:"step-7-testing-strategy",level:2},{value:"Jest Configuration for Monorepo",id:"jest-configuration-for-monorepo",level:3},{value:"Package-Specific Tests",id:"package-specific-tests",level:3},{value:"Step 8: Development Workflow",id:"step-8-development-workflow",level:2},{value:"Quick Commands",id:"quick-commands",level:3},{value:"VS Code Workspace",id:"vs-code-workspace",level:3},{value:"Step 9: CI/CD Integration",id:"step-9-cicd-integration",level:2},{value:"GitHub Actions Example",id:"github-actions-example",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Dependency Management</strong>",id:"1-dependency-management",level:3},{value:"2. <strong>Build Strategy</strong>",id:"2-build-strategy",level:3},{value:"3. <strong>Code Sharing</strong>",id:"3-code-sharing",level:3},{value:"4. <strong>Testing</strong>",id:"4-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue: Import Resolution Fails",id:"issue-import-resolution-fails",level:3},{value:"Issue: Build Order Dependencies",id:"issue-build-order-dependencies",level:3},{value:"Issue: Hot Reload Not Working",id:"issue-hot-reload-not-working",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"monorepo-setup-",children:"Monorepo Setup \ud83c\udfe2"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to set up a monorepo with Presetter, sharing configurations across multiple packages while allowing individual customizations. Perfect for organizations with multiple related projects."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This tutorial covers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Setting up a pnpm workspace"}),"\n",(0,r.jsx)(n.li,{children:"Configuring shared Presetter settings"}),"\n",(0,r.jsx)(n.li,{children:"Managing per-package configurations"}),"\n",(0,r.jsx)(n.li,{children:"Cross-package dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Build orchestration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js 18+"})," and ",(0,r.jsx)(n.strong,{children:"pnpm"})," installed"]}),"\n",(0,r.jsx)(n.li,{children:"Understanding of package workspaces"}),"\n",(0,r.jsx)(n.li,{children:"Basic familiarity with monorepo concepts"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-monorepo-structure",children:"Step 1: Create Monorepo Structure"}),"\n",(0,r.jsx)(n.p,{children:"Initialize your monorepo workspace:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir my-awesome-monorepo\ncd my-awesome-monorepo\n\n# Initialize root package.json\npnpm init\n\n# Create workspace structure\nmkdir packages apps tools\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create workspace configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="pnpm-workspace.yaml"',children:'packages:\n  - "packages/*"\n  - "apps/*"\n  - "tools/*"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-configure-root-presetter-setup",children:"Step 2: Configure Root Presetter Setup"}),"\n",(0,r.jsx)(n.p,{children:"Install Presetter at the root level:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install Presetter and monorepo preset\npnpm add -D presetter presetter-preset-monorepo\n\n# Bootstrap root configuration\npresetter bootstrap\n"})}),"\n",(0,r.jsx)(n.p,{children:"Configure the root Presetter setup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="presetter.config.ts"',children:"import monorepo from 'presetter-preset-monorepo';\nimport { preset } from 'presetter-types';\n\nexport default preset('my-monorepo', {\n  extends: [monorepo],\n  variables: {\n    // Shared variables for all packages\n    nodeVersion: '18',\n    source: 'src',\n    output: 'lib'\n  },\n  \n  override: {\n    assets: {\n      // Root-level configurations\n      '.gitignore': [\n        'node_modules/',\n        '*/node_modules/',\n        'dist/',\n        'lib/',\n        'build/',\n        'coverage/',\n        '.env.local',\n        '.DS_Store'\n      ]\n    }\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-create-package-templates",children:"Step 3: Create Package Templates"}),"\n",(0,r.jsx)(n.h3,{id:"library-package-template",children:"Library Package Template"}),"\n",(0,r.jsx)(n.p,{children:"Create a shared library package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir packages/shared-utils\ncd packages/shared-utils\npnpm init\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="packages/shared-utils/package.json"',children:'{\n  "name": "@myorg/shared-utils",\n  "version": "1.0.0",\n  "type": "module",\n  "main": "./lib/index.js",\n  "types": "./lib/index.d.ts",\n  "exports": {\n    ".": {\n      "import": "./lib/index.js",\n      "types": "./lib/index.d.ts"\n    }\n  },\n  "files": ["lib/"],\n  "scripts": {\n    "build": "run build",\n    "clean": "run clean",\n    "test": "run test",\n    "typecheck": "run typecheck"\n  },\n  "devDependencies": {\n    "presetter": "workspace:*",\n    "presetter-preset-esm": "workspace:*"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="packages/shared-utils/presetter.config.ts"',children:"// Simple preset usage for most packages\nexport { default } from 'presetter-preset-esm';\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="packages/shared-utils/src/index.ts"',children:"export interface Logger {\n  info(message: string): void;\n  error(message: string): void;\n  warn(message: string): void;\n}\n\nexport function createLogger(prefix: string): Logger {\n  return {\n    info: (message) => console.log(`[${prefix}] INFO: ${message}`),\n    error: (message) => console.error(`[${prefix}] ERROR: ${message}`),\n    warn: (message) => console.warn(`[${prefix}] WARN: ${message}`)\n  };\n}\n\nexport function formatDate(date: Date): string {\n  return date.toISOString().split('T')[0];\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"react-app-package",children:"React App Package"}),"\n",(0,r.jsx)(n.p,{children:"Create a React application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir apps/web-app\ncd apps/web-app\npnpm init\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="apps/web-app/package.json"',children:'{\n  "name": "@myorg/web-app",\n  "version": "1.0.0",\n  "private": true,\n  "type": "module",\n  "scripts": {\n    "dev": "run dev",\n    "build": "run build",\n    "preview": "run preview",\n    "test": "run test",\n    "lint": "run lint"\n  },\n  "dependencies": {\n    "@myorg/shared-utils": "workspace:*",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0"\n  },\n  "devDependencies": {\n    "presetter": "workspace:*",\n    "presetter-preset-react": "workspace:*",\n    "@types/react": "^18.2.0",\n    "@types/react-dom": "^18.2.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="apps/web-app/presetter.config.ts"',children:"import react from 'presetter-preset-react';\nimport { preset } from 'presetter-types';\n\nexport default preset('web-app', {\n  extends: [react],\n  variables: {\n    source: 'src',\n    output: 'dist'\n  },\n  \n  override: {\n    assets: {\n      // Custom Vite configuration for the app\n      'vite.config.ts': (current) => ({\n        ...current,\n        server: {\n          port: 3000,\n          open: true\n        },\n        build: {\n          sourcemap: true\n        }\n      })\n    }\n  }\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="apps/web-app/src/App.tsx"',children:"import React from 'react';\nimport { createLogger, formatDate } from '@myorg/shared-utils';\n\nconst logger = createLogger('WebApp');\n\nfunction App() {\n  React.useEffect(() => {\n    logger.info('App mounted');\n  }, []);\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h1>My Awesome Web App</h1>\n      <p>Today is: {formatDate(new Date())}</p>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-configure-cross-package-dependencies",children:"Step 4: Configure Cross-Package Dependencies"}),"\n",(0,r.jsx)(n.h3,{id:"update-root-packagejson",children:"Update Root Package.json"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "@myorg/monorepo",\n  "private": true,\n  "scripts": {\n    "build": "pnpm -r run build",\n    "test": "pnpm -r run test",\n    "lint": "pnpm -r run lint",\n    "clean": "pnpm -r run clean",\n    "dev": "pnpm --parallel -r run dev",\n    "typecheck": "pnpm -r run typecheck"\n  },\n  "devDependencies": {\n    "presetter": "^8.0.0",\n    "presetter-preset-monorepo": "^8.0.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bootstrap-all-packages",children:"Bootstrap All Packages"}),"\n",(0,r.jsx)(n.p,{children:"From the root directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install dependencies for all packages\npnpm install\n\n# Bootstrap Presetter in all packages\npnpm -r exec presetter bootstrap\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-build-orchestration",children:"Step 5: Build Orchestration"}),"\n",(0,r.jsx)(n.h3,{id:"sequential-build-dependencies-first",children:"Sequential Build (Dependencies First)"}),"\n",(0,r.jsx)(n.p,{children:"Create a build script that respects dependency order:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="scripts/build.sh"',children:'#!/bin/bash\nset -e\n\necho "\ud83c\udfd7\ufe0f  Building monorepo packages..."\n\n# Build shared utilities first\necho "\ud83d\udce6 Building shared-utils..."\ncd packages/shared-utils\npnpm run build\ncd ../..\n\n# Build applications that depend on utilities\necho "\ud83c\udf10 Building web-app..."\ncd apps/web-app\npnpm run build\ncd ../..\n\necho "\u2705 All packages built successfully!"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"parallel-development",children:"Parallel Development"}),"\n",(0,r.jsx)(n.p,{children:"For development, run multiple packages in parallel:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "dev": "concurrently \\"pnpm --filter @myorg/shared-utils run watch\\" \\"pnpm --filter @myorg/web-app run dev\\"",\n    "dev:utils": "pnpm --filter @myorg/shared-utils run watch",\n    "dev:web": "pnpm --filter @myorg/web-app run dev"\n  },\n  "devDependencies": {\n    "concurrently": "^8.0.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-6-shared-configuration-management",children:"Step 6: Shared Configuration Management"}),"\n",(0,r.jsx)(n.h3,{id:"eslint-configuration-sharing",children:"ESLint Configuration Sharing"}),"\n",(0,r.jsx)(n.p,{children:"Create a shared ESLint config package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir packages/eslint-config\ncd packages/eslint-config\npnpm init\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="packages/eslint-config/package.json"',children:'{\n  "name": "@myorg/eslint-config",\n  "version": "1.0.0",\n  "main": "index.js",\n  "files": ["index.js"],\n  "peerDependencies": {\n    "eslint": "^8.0.0",\n    "@typescript-eslint/parser": "^6.0.0",\n    "@typescript-eslint/eslint-plugin": "^6.0.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="packages/eslint-config/index.js"',children:"module.exports = {\n  extends: [\n    '@typescript-eslint/recommended',\n    'prettier'\n  ],\n  rules: {\n    // Shared organization rules\n    'no-console': 'warn',\n    '@typescript-eslint/no-unused-vars': 'error',\n    '@typescript-eslint/explicit-function-return-type': 'warn'\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"use-shared-config-in-packages",children:"Use Shared Config in Packages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="packages/shared-utils/presetter.config.ts"',children:"import presetEsm from 'presetter-preset-esm';\n\nexport default presetEsm({\n  assets: {\n    '.eslintrc.json': {\n      extends: ['@myorg/eslint-config']\n    }\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-7-testing-strategy",children:"Step 7: Testing Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"jest-configuration-for-monorepo",children:"Jest Configuration for Monorepo"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest';\n\nconst config: Config = {\n  projects: [\n    '<rootDir>/packages/*/jest.config.ts',\n    '<rootDir>/apps/*/jest.config.ts'\n  ],\n  coverageDirectory: '<rootDir>/coverage',\n  collectCoverageFrom: [\n    'packages/*/src/**/*.{ts,tsx}',\n    'apps/*/src/**/*.{ts,tsx}',\n    '!**/*.d.ts',\n    '!**/*.test.{ts,tsx}'\n  ]\n};\n\nexport default config;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"package-specific-tests",children:"Package-Specific Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="packages/shared-utils/jest.config.ts"',children:"import type { Config } from 'jest';\n\nconst config: Config = {\n  displayName: 'shared-utils',\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['<rootDir>/src'],\n  testMatch: ['**/__tests__/**/*.test.ts']\n};\n\nexport default config;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-8-development-workflow",children:"Step 8: Development Workflow"}),"\n",(0,r.jsx)(n.h3,{id:"quick-commands",children:"Quick Commands"}),"\n",(0,r.jsx)(n.p,{children:"Add convenience scripts to your shell:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="~/.zshrc or ~/.bashrc"',children:'# Monorepo helpers\nalias repo="cd /path/to/my-awesome-monorepo"\nalias build-all="pnpm run build"\nalias test-all="pnpm run test"\nalias dev-web="pnpm --filter @myorg/web-app run dev"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"vs-code-workspace",children:"VS Code Workspace"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title=".vscode/settings.json"',children:'{\n  "typescript.preferences.includePackageJsonAutoImports": "on",\n  "typescript.suggest.includeCompletionsForModuleExports": true,\n  "eslint.workingDirectories": [\n    "packages/shared-utils",\n    "apps/web-app"\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-9-cicd-integration",children:"Step 9: CI/CD Integration"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-example",children:"GitHub Actions Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title=".github/workflows/ci.yml"',children:"name: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 8\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: 'pnpm'\n      \n      - run: pnpm install --frozen-lockfile\n      - run: pnpm run typecheck\n      - run: pnpm run lint\n      - run: pnpm run test\n      - run: pnpm run build\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.h3,{id:"1-dependency-management",children:["1. ",(0,r.jsx)(n.strong,{children:"Dependency Management"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"workspace:*"})," for internal dependencies"]}),"\n",(0,r.jsx)(n.li,{children:"Pin external dependencies to specific versions"}),"\n",(0,r.jsx)(n.li,{children:"Regular dependency updates across all packages"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-build-strategy",children:["2. ",(0,r.jsx)(n.strong,{children:"Build Strategy"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Build shared libraries first"}),"\n",(0,r.jsx)(n.li,{children:"Use incremental builds when possible"}),"\n",(0,r.jsx)(n.li,{children:"Cache build artifacts in CI"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-code-sharing",children:["3. ",(0,r.jsx)(n.strong,{children:"Code Sharing"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Extract common utilities to shared packages"}),"\n",(0,r.jsx)(n.li,{children:"Use TypeScript path mapping for cleaner imports"}),"\n",(0,r.jsx)(n.li,{children:"Share ESLint, Prettier configs"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-testing",children:["4. ",(0,r.jsx)(n.strong,{children:"Testing"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test packages in isolation"}),"\n",(0,r.jsx)(n.li,{children:"Integration tests for cross-package functionality"}),"\n",(0,r.jsx)(n.li,{children:"Shared test utilities"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"issue-import-resolution-fails",children:"Issue: Import Resolution Fails"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem:"})," Can't import from workspace packages\n",(0,r.jsx)(n.strong,{children:"Solution:"})," Ensure proper TypeScript configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "@myorg/*": ["packages/*/src"]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"issue-build-order-dependencies",children:"Issue: Build Order Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem:"})," Builds fail due to dependency order\n",(0,r.jsx)(n.strong,{children:"Solution:"})," Use pnpm's filtering and topological sorting:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Build in dependency order\npnpm -r --filter="...@myorg/web-app" run build\n'})}),"\n",(0,r.jsx)(n.h3,{id:"issue-hot-reload-not-working",children:"Issue: Hot Reload Not Working"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem:"})," Changes in shared packages don't trigger reload\n",(0,r.jsx)(n.strong,{children:"Solution:"})," Set up proper watch mode with linking:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="packages/shared-utils/package.json"',children:'{\n  "scripts": {\n    "watch": "tsc --watch --preserveWatchOutput"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/presetter/docs/tutorials/custom-presets",children:"Custom Preset Creation"})," - Build organization-specific presets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../api/",children:"API Documentation"})," - TypeScript API reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../advanced/",children:"Advanced Topics"})," - Performance and optimization"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Setup Time:"})," 30-45 minutes",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Difficulty:"})," Advanced",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Prerequisites:"})," TypeScript, package workspaces, build tools"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);