"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[6138],{2412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tutorials/custom-presets","title":"Creating Custom Presets","description":"Build your own Presetter presets for team-specific requirements and reusable configurations","source":"@site/docs/tutorials/custom-presets.md","sourceDirName":"tutorials","slug":"/tutorials/custom-presets","permalink":"/presetter/docs/tutorials/custom-presets","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/tutorials/custom-presets.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Creating Custom Presets","description":"Build your own Presetter presets for team-specific requirements and reusable configurations"},"sidebar":"tutorialSidebar","previous":{"title":"Monorepo Setup","permalink":"/presetter/docs/tutorials/monorepo-setup"},"next":{"title":"Advanced Topics","permalink":"/presetter/docs/advanced/"}}');var s=t(4848),i=t(8453);const o={sidebar_position:5,title:"Creating Custom Presets",description:"Build your own Presetter presets for team-specific requirements and reusable configurations"},a="Creating Custom Presets \ud83c\udfa8",c={},l=[{value:"Why Create Custom Presets?",id:"why-create-custom-presets",level:2},{value:"Preset Anatomy",id:"preset-anatomy",level:2},{value:"Step 1: Create Preset Package",id:"step-1-create-preset-package",level:2},{value:"Step 2: Design Your Preset Architecture",id:"step-2-design-your-preset-architecture",level:2},{value:"Step 3: Implement Core Configuration",id:"step-3-implement-core-configuration",level:2},{value:"Variables System",id:"variables-system",level:3},{value:"Asset Configuration",id:"asset-configuration",level:3},{value:"Step 4: Implement Configuration Factories",id:"step-4-implement-configuration-factories",level:2},{value:"TypeScript Configuration",id:"typescript-configuration",level:3},{value:"ESLint Configuration",id:"eslint-configuration",level:3},{value:"Package Scripts",id:"package-scripts",level:3},{value:"Step 5: Add Template Files",id:"step-5-add-template-files",level:2},{value:"Step 6: Add Advanced Features",id:"step-6-add-advanced-features",level:2},{value:"Conditional Configuration",id:"conditional-configuration",level:3},{value:"Variable Interpolation",id:"variable-interpolation",level:3},{value:"Step 7: Testing Your Preset",id:"step-7-testing-your-preset",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Step 8: Publishing and Distribution",id:"step-8-publishing-and-distribution",level:2},{value:"Build Configuration",id:"build-configuration",level:3},{value:"Prepare for Publishing",id:"prepare-for-publishing",level:3},{value:"Publish to npm",id:"publish-to-npm",level:3},{value:"Step 9: Using Your Custom Preset",id:"step-9-using-your-custom-preset",level:2},{value:"In a New Project",id:"in-a-new-project",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Composing Multiple Presets",id:"composing-multiple-presets",level:3},{value:"Plugin System",id:"plugin-system",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Versioning Strategy</strong>",id:"1-versioning-strategy",level:3},{value:"2. <strong>Configuration Philosophy</strong>",id:"2-configuration-philosophy",level:3},{value:"3. <strong>Documentation</strong>",id:"3-documentation",level:3},{value:"4. <strong>Testing</strong>",id:"4-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue: Asset Conflicts",id:"issue-asset-conflicts",level:3},{value:"Issue: Variable Resolution",id:"issue-variable-resolution",level:3}];function p(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"creating-custom-presets-",children:"Creating Custom Presets \ud83c\udfa8"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how to build custom Presetter presets that encapsulate your team's standards, tool configurations, and best practices. Perfect for organizations that want to standardize development environments across projects."}),"\n",(0,s.jsx)(n.h2,{id:"why-create-custom-presets",children:"Why Create Custom Presets?"}),"\n",(0,s.jsx)(n.p,{children:"Custom presets help you:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standardize"}),": Consistent tooling across all team projects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encapsulate"}),": Team-specific ESLint rules, build configurations, and workflows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evolve"}),": Update all projects by updating a single preset package"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scale"}),": Easily onboard new projects and team members"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"preset-anatomy",children:"Preset Anatomy"}),"\n",(0,s.jsx)(n.p,{children:"A Presetter preset is essentially a package that exports configuration functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Basic preset structure\nexport default function myPreset(options = {}) {\n  return {\n    variables: { /* template variables */ },\n    assets: { /* configuration files */ }\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-1-create-preset-package",children:"Step 1: Create Preset Package"}),"\n",(0,s.jsx)(n.p,{children:"Initialize your custom preset:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir presetter-preset-myteam\ncd presetter-preset-myteam\npnpm init\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set up the basic package structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "name": "@myteam/presetter-preset-myteam",\n  "version": "1.0.0",\n  "description": "My team\'s Presetter preset with standardized configurations",\n  "main": "lib/index.js",\n  "types": "lib/index.d.ts",\n  "exports": {\n    ".": {\n      "import": "./lib/index.js",\n      "require": "./lib/index.js",\n      "types": "./lib/index.d.ts"\n    }\n  },\n  "files": ["lib/", "templates/"],\n  "keywords": ["presetter", "preset", "typescript", "eslint"],\n  "peerDependencies": {\n    "presetter": "^8.0.0"\n  },\n  "devDependencies": {\n    "presetter": "^8.0.0",\n    "presetter-preset-essentials": "^8.0.0",\n    "typescript": "^5.0.0"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-design-your-preset-architecture",children:"Step 2: Design Your Preset Architecture"}),"\n",(0,s.jsx)(n.p,{children:"Plan your preset's capabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/index.ts"',children:"import type { PresetGenerator, ProjectContext } from 'presetter-types';\n\nexport interface MyTeamPresetOptions {\n  // Project type configuration\n  projectType?: 'library' | 'application' | 'service';\n  \n  // Framework integrations\n  framework?: 'react' | 'vue' | 'node' | 'none';\n  \n  // Quality settings\n  strictMode?: boolean;\n  testFramework?: 'jest' | 'vitest' | 'none';\n  \n  // Build configuration\n  bundler?: 'rollup' | 'webpack' | 'vite' | 'none';\n  \n  // Team standards\n  codeStyle?: 'standard' | 'airbnb' | 'custom';\n}\n\nconst myTeamPreset: PresetGenerator<MyTeamPresetOptions> = (\n  context: ProjectContext,\n  options: MyTeamPresetOptions = {}\n) => {\n  const {\n    projectType = 'library',\n    framework = 'none',\n    strictMode = true,\n    testFramework = 'jest',\n    bundler = 'rollup',\n    codeStyle = 'standard'\n  } = options;\n\n  return {\n    variables: createVariables(context, options),\n    assets: createAssets(context, options)\n  };\n};\n\nexport default myTeamPreset;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-3-implement-core-configuration",children:"Step 3: Implement Core Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"variables-system",children:"Variables System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/variables.ts"',children:"import type { ProjectContext } from 'presetter-types';\nimport type { MyTeamPresetOptions } from './index.js';\n\nexport function createVariables(\n  context: ProjectContext,\n  options: MyTeamPresetOptions\n) {\n  const { projectType, framework } = options;\n  \n  return {\n    // Source and output directories\n    source: 'src',\n    output: projectType === 'library' ? 'lib' : 'dist',\n    \n    // Node and TypeScript versions\n    nodeVersion: '18',\n    typescriptVersion: '^5.0.0',\n    \n    // Build configuration\n    target: projectType === 'library' ? 'ES2020' : 'ES2022',\n    module: projectType === 'library' ? 'ESNext' : 'CommonJS',\n    \n    // Framework-specific variables\n    ...(framework === 'react' && {\n      reactVersion: '^18.0.0',\n      jsxRuntime: 'automatic'\n    }),\n    \n    // Team-specific variables\n    organizationName: '@myteam',\n    licenseType: 'MIT',\n    authorName: 'My Team',\n    authorEmail: 'dev@myteam.com'\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"asset-configuration",children:"Asset Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/assets.ts"',children:"import type { ProjectContext, PresetAssets } from 'presetter-types';\nimport type { MyTeamPresetOptions } from './index.js';\n\nexport function createAssets(\n  context: ProjectContext,\n  options: MyTeamPresetOptions\n): PresetAssets {\n  const { projectType, framework, strictMode, testFramework, bundler } = options;\n  \n  return {\n    // TypeScript configuration\n    'tsconfig.json': createTypeScriptConfig(projectType, strictMode),\n    \n    // ESLint configuration\n    '.eslintrc.json': createESLintConfig(framework, strictMode),\n    \n    // Prettier configuration\n    'prettier.config.js': createPrettierConfig(),\n    \n    // Package.json scripts\n    'package.json': (current) => ({\n      ...current,\n      scripts: {\n        ...current?.scripts,\n        ...createPackageScripts(projectType, testFramework, bundler)\n      }\n    }),\n    \n    // Conditional configurations\n    ...(testFramework === 'jest' && {\n      'jest.config.ts': createJestConfig(framework)\n    }),\n    \n    ...(bundler === 'rollup' && {\n      'rollup.config.ts': createRollupConfig(projectType)\n    }),\n    \n    // Team-specific files\n    '.gitignore': createGitIgnore(projectType),\n    '.github/workflows/ci.yml': createCIWorkflow(),\n    'README.md': createReadmeTemplate(context)\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-4-implement-configuration-factories",children:"Step 4: Implement Configuration Factories"}),"\n",(0,s.jsx)(n.h3,{id:"typescript-configuration",children:"TypeScript Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/configs/typescript.ts"',children:"export function createTypeScriptConfig(\n  projectType: string,\n  strictMode: boolean\n) {\n  const baseConfig = {\n    compilerOptions: {\n      target: projectType === 'library' ? 'ES2020' : 'ES2022',\n      lib: ['ES2022'],\n      module: 'ESNext',\n      moduleResolution: 'node',\n      allowSyntheticDefaultImports: true,\n      esModuleInterop: true,\n      skipLibCheck: true,\n      \n      // Output configuration\n      outDir: projectType === 'library' ? 'lib' : 'dist',\n      rootDir: 'src',\n      declaration: projectType === 'library',\n      declarationMap: projectType === 'library',\n      \n      // Strict mode configuration\n      strict: strictMode,\n      noImplicitAny: strictMode,\n      noImplicitReturns: strictMode,\n      noUnusedLocals: strictMode,\n      noUnusedParameters: strictMode\n    },\n    include: ['src/**/*'],\n    exclude: ['node_modules', 'dist', 'lib', '**/*.test.*']\n  };\n\n  // Library-specific configurations\n  if (projectType === 'library') {\n    baseConfig.compilerOptions = {\n      ...baseConfig.compilerOptions,\n      declarationDir: 'lib',\n      sourceMap: true\n    };\n  }\n\n  return baseConfig;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"eslint-configuration",children:"ESLint Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/configs/eslint.ts"',children:"export function createESLintConfig(framework: string, strictMode: boolean) {\n  const baseConfig = {\n    extends: [\n      '@typescript-eslint/recommended',\n      'prettier'\n    ],\n    parser: '@typescript-eslint/parser',\n    plugins: ['@typescript-eslint'],\n    rules: {\n      // Team standards\n      'no-console': 'warn',\n      'prefer-const': 'error',\n      'no-var': 'error',\n      \n      // TypeScript rules\n      '@typescript-eslint/no-unused-vars': 'error',\n      '@typescript-eslint/no-explicit-any': strictMode ? 'error' : 'warn',\n      '@typescript-eslint/explicit-function-return-type': 'warn'\n    }\n  };\n\n  // Framework-specific rules\n  if (framework === 'react') {\n    baseConfig.extends.push('plugin:react/recommended', 'plugin:react-hooks/recommended');\n    baseConfig.plugins.push('react', 'react-hooks');\n    baseConfig.rules = {\n      ...baseConfig.rules,\n      'react/react-in-jsx-scope': 'off', // Not needed in React 17+\n      'react-hooks/rules-of-hooks': 'error',\n      'react-hooks/exhaustive-deps': 'warn'\n    };\n  }\n\n  return baseConfig;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"package-scripts",children:"Package Scripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/configs/scripts.ts"',children:"export function createPackageScripts(\n  projectType: string,\n  testFramework: string,\n  bundler: string\n) {\n  const baseScripts = {\n    'build': 'run build',\n    'clean': 'run clean',\n    'typecheck': 'run typecheck',\n    'lint': 'run lint',\n    'format': 'run format'\n  };\n\n  // Add test scripts\n  if (testFramework !== 'none') {\n    baseScripts['test'] = 'run test';\n    baseScripts['test:watch'] = 'run test --watch';\n    baseScripts['test:coverage'] = 'run test --coverage';\n  }\n\n  // Project-specific scripts\n  if (projectType === 'application') {\n    baseScripts['dev'] = 'run dev';\n    baseScripts['preview'] = 'run preview';\n  }\n\n  if (projectType === 'library') {\n    baseScripts['prepublishOnly'] = 'pnpm run build';\n  }\n\n  return baseScripts;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-5-add-template-files",children:"Step 5: Add Template Files"}),"\n",(0,s.jsx)(n.p,{children:"Create reusable template files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",metastring:'title="templates/README.md"',children:"# {{{name}}}\n\n{{{description}}}\n\n## Installation\n\n\\`\\`\\`bash\npnpm add {{name}}\n\\`\\`\\`\n\n## Usage\n\n\x3c!-- Add usage examples here --\x3e\n\n## Development\n\nThis project uses [Presetter](https://github.com/alvis/presetter) for development tooling.\n\n\\`\\`\\`bash\n# Install dependencies\npnpm install\n\n# Development mode\npnpm run dev\n\n# Build\npnpm run build\n\n# Test\npnpm run test\n\\`\\`\\`\n\n## Contributing\n\n1. Follow the existing code style\n2. Add tests for new features\n3. Ensure all tests pass\n4. Update documentation\n\n## License\n\n{{{license}}}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="templates/.github/workflows/ci.yml"',children:"name: CI\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18, 20]\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'pnpm'\n      \n      - name: Install pnpm\n        uses: pnpm/action-setup@v2\n        with:\n          version: 8\n      \n      - name: Install dependencies\n        run: pnpm install --frozen-lockfile\n      \n      - name: Type check\n        run: pnpm run typecheck\n      \n      - name: Lint\n        run: pnpm run lint\n      \n      - name: Test\n        run: pnpm run test\n      \n      - name: Build\n        run: pnpm run build\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-6-add-advanced-features",children:"Step 6: Add Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"conditional-configuration",children:"Conditional Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/features/conditional.ts"',children:"import type { ProjectContext, PresetContent } from 'presetter-types';\n\nexport function createConditionalAssets(context: ProjectContext) {\n  const assets: Record<string, PresetContent> = {};\n  \n  // Only add Dockerfile for applications\n  if (context.packageJson?.scripts?.start) {\n    assets['Dockerfile'] = createDockerfile();\n  }\n  \n  // Add GitHub templates for public repositories\n  if (!context.packageJson?.private) {\n    assets['.github/ISSUE_TEMPLATE/bug_report.md'] = createBugReportTemplate();\n    assets['.github/ISSUE_TEMPLATE/feature_request.md'] = createFeatureRequestTemplate();\n  }\n  \n  // Add Storybook config for React projects\n  if (context.packageJson?.dependencies?.react) {\n    assets['.storybook/main.ts'] = createStorybookConfig();\n  }\n  \n  return assets;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/features/templating.ts"',children:"export function interpolateTemplate(\n  template: string,\n  variables: Record<string, any>\n): string {\n  return template.replace(/{{{(\\w+)}}}/g, (match, key) => {\n    return variables[key] || match;\n  });\n}\n\nexport function createReadmeTemplate(context: ProjectContext) {\n  return (current: string | undefined, { variables }) => {\n    const template = readFileSync(\n      new URL('../templates/README.md', import.meta.url),\n      'utf-8'\n    );\n    \n    return interpolateTemplate(template, {\n      name: context.packageJson?.name || 'my-project',\n      description: context.packageJson?.description || 'A project built with Presetter',\n      license: context.packageJson?.license || 'MIT',\n      ...variables\n    });\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-7-testing-your-preset",children:"Step 7: Testing Your Preset"}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/__tests__/preset.test.ts"',children:"import { describe, expect, test } from 'vitest';\nimport myTeamPreset from '../index.js';\n\ndescribe('myTeamPreset', () => {\n  test('should generate basic configuration', () => {\n    const context = {\n      packageJson: { name: 'test-project' },\n      isRepoRoot: true,\n      relativeRepoRoot: '.'\n    };\n    \n    const result = myTeamPreset(context);\n    \n    expect(result.variables).toMatchObject({\n      source: 'src',\n      output: 'lib',\n      nodeVersion: '18'\n    });\n    \n    expect(result.assets).toHaveProperty('tsconfig.json');\n    expect(result.assets).toHaveProperty('.eslintrc.json');\n  });\n  \n  test('should support React framework', () => {\n    const context = {\n      packageJson: { name: 'test-react-app' },\n      isRepoRoot: true,\n      relativeRepoRoot: '.'\n    };\n    \n    const result = myTeamPreset(context, { framework: 'react' });\n    \n    expect(result.variables).toHaveProperty('reactVersion');\n    expect(result.variables).toHaveProperty('jsxRuntime');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/__tests__/integration.test.ts"',children:"import { describe, expect, test, beforeEach, afterEach } from 'vitest';\nimport { mkdtemp, rm } from 'fs/promises';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { execSync } from 'child_process';\n\ndescribe('preset integration', () => {\n  let tempDir: string;\n  \n  beforeEach(async () => {\n    tempDir = await mkdtemp(join(tmpdir(), 'preset-test-'));\n  });\n  \n  afterEach(async () => {\n    await rm(tempDir, { recursive: true });\n  });\n  \n  test('should bootstrap a working project', () => {\n    // Create a test project\n    execSync('pnpm init', { cwd: tempDir });\n    execSync(`pnpm add -D ${process.cwd()}`, { cwd: tempDir });\n    \n    // Bootstrap with preset\n    execSync('presetter bootstrap', { cwd: tempDir });\n    \n    // Verify files exist\n    const files = ['tsconfig.json', '.eslintrc.json', 'prettier.config.js'];\n    files.forEach(file => {\n      expect(() => {\n        execSync(`test -f ${file}`, { cwd: tempDir });\n      }).not.toThrow();\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-8-publishing-and-distribution",children:"Step 8: Publishing and Distribution"}),"\n",(0,s.jsx)(n.h3,{id:"build-configuration",children:"Build Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="presetter.config.ts"',children:"import presetEsm from 'presetter-preset-esm';\n\nexport default presetEsm({\n  variables: {\n    source: 'src',\n    output: 'lib'\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prepare-for-publishing",children:"Prepare for Publishing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "build": "run build",\n    "test": "run test",\n    "prepublishOnly": "pnpm run build && pnpm run test"\n  },\n  "publishConfig": {\n    "access": "public"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"publish-to-npm",children:"Publish to npm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Build and test\npnpm run build\npnpm run test\n\n# Publish\npnpm publish\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-9-using-your-custom-preset",children:"Step 9: Using Your Custom Preset"}),"\n",(0,s.jsx)(n.h3,{id:"in-a-new-project",children:"In a New Project"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm add -D @myteam/presetter-preset-myteam\npresetter bootstrap\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="presetter.config.ts"',children:"import myTeamPreset from '@myteam/presetter-preset-myteam';\n\nexport default myTeamPreset({\n  projectType: 'library',\n  framework: 'react',\n  strictMode: true,\n  testFramework: 'jest'\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"composing-multiple-presets",children:"Composing Multiple Presets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/index.ts"',children:"import presetEssentials from 'presetter-preset-essentials';\nimport presetReact from 'presetter-preset-react';\n\nexport default function myTeamPreset(options = {}) {\n  const basePresets = [\n    presetEssentials,\n    ...(options.framework === 'react' ? [presetReact] : [])\n  ];\n  \n  return {\n    // Merge base presets\n    ...mergePresets(basePresets),\n    \n    // Add team-specific overrides\n    assets: {\n      '.eslintrc.json': (current) => ({\n        ...current,\n        rules: {\n          ...current?.rules,\n          // Team-specific rules\n          'no-console': 'error'\n        }\n      })\n    }\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plugin-system",children:"Plugin System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="src/plugins/index.ts"',children:"export interface PresetPlugin {\n  name: string;\n  apply(config: any, options: any): any;\n}\n\nexport function applyPlugins(\n  config: any,\n  plugins: PresetPlugin[],\n  options: any\n) {\n  return plugins.reduce((acc, plugin) => {\n    return plugin.apply(acc, options);\n  }, config);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.h3,{id:"1-versioning-strategy",children:["1. ",(0,s.jsx)(n.strong,{children:"Versioning Strategy"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use semantic versioning"}),"\n",(0,s.jsx)(n.li,{children:"Document breaking changes"}),"\n",(0,s.jsx)(n.li,{children:"Provide migration guides"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-configuration-philosophy",children:["2. ",(0,s.jsx)(n.strong,{children:"Configuration Philosophy"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prefer convention over configuration"}),"\n",(0,s.jsx)(n.li,{children:"Provide sensible defaults"}),"\n",(0,s.jsx)(n.li,{children:"Allow overrides when needed"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-documentation",children:["3. ",(0,s.jsx)(n.strong,{children:"Documentation"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Document all options"}),"\n",(0,s.jsx)(n.li,{children:"Provide usage examples"}),"\n",(0,s.jsx)(n.li,{children:"Maintain a changelog"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-testing",children:["4. ",(0,s.jsx)(n.strong,{children:"Testing"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit test configuration generation"}),"\n",(0,s.jsx)(n.li,{children:"Integration test with real projects"}),"\n",(0,s.jsx)(n.li,{children:"Test across different Node.js versions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"issue-asset-conflicts",children:"Issue: Asset Conflicts"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Multiple presets define the same file\n",(0,s.jsx)(n.strong,{children:"Solution:"})," Use merge strategies:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  '.eslintrc.json': (current, context) => {\n    const base = current || {};\n    return deepMerge(base, myConfig);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"issue-variable-resolution",children:"Issue: Variable Resolution"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Variables not interpolating correctly\n",(0,s.jsx)(n.strong,{children:"Solution:"})," Ensure proper template syntax:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Use triple braces for variable interpolation\n'README.md': 'Project: {{{name}}}'\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Time:"})," 2-4 hours",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Difficulty:"})," Advanced",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Prerequisites:"})," TypeScript, Presetter concepts, npm publishing"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);