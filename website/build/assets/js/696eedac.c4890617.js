"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[3300],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},8758:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"cli-reference/run","title":"presetter run","description":"Run a single script or task from your preset configuration.","source":"@site/docs/cli-reference/run.md","sourceDirName":"cli-reference","slug":"/cli-reference/run","permalink":"/presetter/docs/cli-reference/run","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/cli-reference/run.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"presetter run"},"sidebar":"tutorialSidebar","previous":{"title":"presetter bootstrap","permalink":"/presetter/docs/cli-reference/bootstrap"},"next":{"title":"presetter run-s","permalink":"/presetter/docs/cli-reference/run-s"}}');var r=s(4848),i=s(8453);const l={sidebar_position:3,title:"presetter run"},a="presetter run",c={},d=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Arguments",id:"arguments",level:2},{value:"<code>&lt;task&gt;</code>",id:"task",level:3},{value:"Options",id:"options",level:2},{value:"<code>--template</code>",id:"--template",level:3},{value:"Global Options",id:"global-options",level:3},{value:"Argument Passing",id:"argument-passing",level:2},{value:"Pattern Matching",id:"pattern-matching",level:2},{value:"Single-level Wildcards (<code>*</code>)",id:"single-level-wildcards-",level:3},{value:"Multi-level Wildcards (<code>**</code>)",id:"multi-level-wildcards-",level:3},{value:"Complex Patterns",id:"complex-patterns",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Pattern-Based Execution",id:"pattern-based-execution",level:3},{value:"Template Mode",id:"template-mode",level:3},{value:"Real-World Scenarios",id:"real-world-scenarios",level:3},{value:"Script Resolution",id:"script-resolution",level:2},{value:"Example Resolution",id:"example-resolution",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"With npm/pnpm/yarn",id:"with-npmpnpmyarn",level:3},{value:"With IDE Integration",id:"with-ide-integration",level:3},{value:"With Git Hooks",id:"with-git-hooks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Dynamic Task Selection",id:"dynamic-task-selection",level:3},{value:"Custom Task Runners",id:"custom-task-runners",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Alternative: Direct Binary",id:"alternative-direct-binary",level:2},{value:"Related Commands",id:"related-commands",level:2},{value:"See Also",id:"see-also",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"presetter-run",children:"presetter run"})}),"\n",(0,r.jsx)(n.p,{children:"Run a single script or task from your preset configuration."}),"\n",(0,r.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"presetter run <task> [options] [-- arguments...]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"run"})," command executes a single script defined in your preset or local ",(0,r.jsx)(n.code,{children:"package.json"}),". It:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Merges scripts"})," from preset with local package.json (local takes priority)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resolves task patterns"})," using wildcards and selectors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Passes arguments"})," to the underlying script"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provides template-only mode"})," for preset-specific scripts"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This is the fundamental command for task execution in Presetter projects."}),"\n",(0,r.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h3,{id:"task",children:(0,r.jsx)(n.code,{children:"<task>"})}),"\n",(0,r.jsx)(n.p,{children:"The task name or pattern to execute. Supports:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exact names"}),": ",(0,r.jsx)(n.code,{children:"build"}),", ",(0,r.jsx)(n.code,{children:"test"}),", ",(0,r.jsx)(n.code,{children:"lint"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wildcard patterns"}),": ",(0,r.jsx)(n.code,{children:"test:*"}),", ",(0,r.jsx)(n.code,{children:"build:**"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complex selectors"}),": ",(0,r.jsx)(n.code,{children:"task1:*:subtask"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsx)(n.h3,{id:"--template",children:(0,r.jsx)(n.code,{children:"--template"})}),"\n",(0,r.jsx)(n.p,{children:"Use script from the template (preset) only, ignoring local package.json scripts."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run the preset's build script, not local override\npresetter run build --template\n\n# Compare preset vs local script\npresetter run test --template  # Runs preset version\npresetter run test             # Runs local version (if exists)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use cases:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Debugging preset configurations"}),"\n",(0,r.jsx)(n.li,{children:"Bypassing local script customizations"}),"\n",(0,r.jsx)(n.li,{children:"Testing preset updates before adopting locally"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"global-options",children:"Global Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--help"})," - Show help information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--version"})," - Show version number"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"argument-passing",children:"Argument Passing"}),"\n",(0,r.jsxs)(n.p,{children:["Arguments after ",(0,r.jsx)(n.code,{children:"--"})," are passed directly to the script:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Pass --watch flag to test script\npresetter run test -- --watch\n\n# Pass multiple arguments\npresetter run build -- --mode production --minify\n\n# Pass flags with values\npresetter run lint -- --ext .ts,.tsx --fix\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,r.jsx)(n.p,{children:"Presetter supports sophisticated task selection:"}),"\n",(0,r.jsxs)(n.h3,{id:"single-level-wildcards-",children:["Single-level Wildcards (",(0,r.jsx)(n.code,{children:"*"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run all direct test subtasks\npresetter run "test:*"\n# Matches: test:unit, test:integration, test:e2e\n# Doesn\'t match: test:unit:watch\n\n# Run all build variants\npresetter run "build:*"\n# Matches: build:dev, build:prod, build:lib\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"multi-level-wildcards-",children:["Multi-level Wildcards (",(0,r.jsx)(n.code,{children:"**"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run all test-related tasks at any depth\npresetter run "test:**"\n# Matches: test:unit, test:unit:watch, test:integration:slow\n\n# Run all tasks under a namespace\npresetter run "tools:**"\n# Matches: tools:clean, tools:copy:assets, tools:generate:types\n'})}),"\n",(0,r.jsx)(n.h3,{id:"complex-patterns",children:"Complex Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run specific pattern at any depth\npresetter run "*:*:watch"\n# Matches: test:unit:watch, build:dev:watch\n\n# Multiple wildcards\npresetter run "**:clean"\n# Matches: build:clean, test:clean, tools:assets:clean\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run common tasks\npresetter run build\npresetter run test\npresetter run lint\n\n# Run with arguments\npresetter run test -- --watch --coverage\npresetter run build -- --mode development\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pattern-based-execution",children:"Pattern-Based Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run all test variants\npresetter run "test:*"\n\n# Run all build-related tasks\npresetter run "build:**"\n\n# Run all watch tasks\npresetter run "**:watch"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"template-mode",children:"Template Mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Use preset version of scripts\npresetter run build --template\npresetter run test --template\n\n# Compare outputs\npresetter run lint --template  # Preset ESLint config\npresetter run lint             # Local ESLint config\n"})}),"\n",(0,r.jsx)(n.h3,{id:"real-world-scenarios",children:"Real-World Scenarios"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Development workflow\npresetter run dev -- --open\npresetter run test -- --watch\n\n# CI/CD pipeline\npresetter run lint -- --format junit\npresetter run test -- --reporter json\npresetter run build -- --analyze\n\n# Library development\npresetter run build:lib -- --format cjs\npresetter run build:types\npresetter run test:integration\n"})}),"\n",(0,r.jsx)(n.h2,{id:"script-resolution",children:"Script Resolution"}),"\n",(0,r.jsx)(n.p,{children:"Presetter resolves scripts in this order:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local package.json scripts"})," (highest priority)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preset scripts"})," (from presetter.config.ts)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extended preset scripts"})," (from preset dependencies)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-resolution",children:"Example Resolution"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Preset scripts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "tsc",\n    "test": "vitest",\n    "lint": "eslint src/**/*.ts"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Local package.json:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "vite build",\n    "dev": "vite dev"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Resolved scripts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"presetter run build   # Runs: vite build (local override)\npresetter run test    # Runs: vitest (from preset)\npresetter run lint    # Runs: eslint src/**/*.ts (from preset)\npresetter run dev     # Runs: vite dev (local only)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"with-npmpnpmyarn",children:"With npm/pnpm/yarn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "presetter run build",\n    "test": "presetter run test",\n    "lint": "presetter run lint",\n    "dev": "presetter run dev -- --open"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-ide-integration",children:"With IDE Integration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"VS Code tasks.json:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "version": "2.0.0",\n  "tasks": [\n    {\n      "label": "Build",\n      "type": "shell",\n      "command": "presetter run build",\n      "group": "build"\n    },\n    {\n      "label": "Test Watch",\n      "type": "shell",\n      "command": "presetter run test -- --watch",\n      "isBackground": true\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"with-git-hooks",children:"With Git Hooks"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using husky:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "husky": {\n    "hooks": {\n      "pre-commit": "presetter run lint -- --staged",\n      "pre-push": "presetter run test"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Task not found:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check available scripts\nnpm run\n\n# List preset scripts\npresetter run --help\n\n# Use pattern to find tasks\npresetter run "*build*"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Wrong script version:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check which script is being used\npresetter run build --dry-run\n\n# Force preset version\npresetter run build --template\n\n# Check script resolution\nDEBUG=presetter:* presetter run build\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arguments not passed:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Ensure -- separator is used\npresetter run test -- --watch    # Correct\npresetter run test --watch       # Wrong\n\n# Quote complex arguments\npresetter run lint -- "--ext .ts,.tsx"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Enable debug output\nDEBUG=presetter:* presetter run build\n\n# Check script resolution\nDEBUG=presetter:script presetter run test\n\n# Verbose pattern matching\nDEBUG=presetter:pattern presetter run "test:*"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-task-selection",children:"Dynamic Task Selection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run tasks based on file changes\nif git diff --name-only | grep -q '\\.test\\.';\nthen\n  presetter run test\nfi\n\n# Run different tasks per environment\ncase $NODE_ENV in\n  development) presetter run dev ;;\n  test) presetter run test:ci ;;\n  production) presetter run build:prod ;;\nesac\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-task-runners",children:"Custom Task Runners"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// scripts/custom-runner.ts\nimport { run } from 'presetter/run';\n\n// Custom run logic\nconst tasks = process.argv.slice(2);\nfor (const task of tasks) {\n  await run([{ selector: task, args: [] }]);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Use patterns to avoid multiple invocations\npresetter run "test:**"     # Better than multiple run commands\n\n# Cache-friendly builds\npresetter run build:cache\npresetter run test:cached\n'})}),"\n",(0,r.jsx)(n.h2,{id:"alternative-direct-binary",children:"Alternative: Direct Binary"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the standalone ",(0,r.jsx)(n.code,{children:"run"})," binary instead of ",(0,r.jsx)(n.code,{children:"presetter run"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# These are equivalent\npresetter run build\nrun build\n\n# Both support the same options\nrun test -- --watch\nrun build --template\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-commands",children:"Related Commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run-s",children:(0,r.jsx)(n.code,{children:"presetter run-s"})})})," - Run multiple tasks sequentially"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run-p",children:(0,r.jsx)(n.code,{children:"presetter run-p"})})})," - Run multiple tasks in parallel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./bootstrap",children:(0,r.jsx)(n.code,{children:"presetter bootstrap"})})})," - Setup project configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/getting-started",children:"Getting Started Guide"})," - Basic task execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/configuration",children:"Configuration Guide"})," - Customizing scripts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/presets",children:"Preset Ecosystem"})," - Available preset scripts"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);