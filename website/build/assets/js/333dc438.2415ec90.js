"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[4240],{5886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"introduction/concepts","title":"Core Concepts","description":"Understand the fundamental concepts that make Presetter powerful and flexible.","source":"@site/docs/introduction/concepts.md","sourceDirName":"introduction","slug":"/introduction/concepts","permalink":"/presetter/docs/introduction/concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/introduction/concepts.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Core Concepts"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/presetter/docs/introduction/installation"},"next":{"title":"Presetter vs Others","permalink":"/presetter/docs/introduction/comparison"}}');var r=t(4848),i=t(8453);const o={sidebar_position:4,title:"Core Concepts"},c="Core Concepts",a={},l=[{value:"The Big Picture",id:"the-big-picture",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Presets",id:"1-presets",level:3},{value:"2. Assets",id:"2-assets",level:3},{value:"3. Variables",id:"3-variables",level:3},{value:"4. Scripts",id:"4-scripts",level:3},{value:"5. Context",id:"5-context",level:3},{value:"Key Principles",id:"key-principles",level:2},{value:"\ud83d\udd04 Configuration Inheritance",id:"-configuration-inheritance",level:3},{value:"\ud83c\udfaf Override System",id:"-override-system",level:3},{value:"\ud83d\ude80 Automatic Dependency Management",id:"-automatic-dependency-management",level:3},{value:"\ud83d\udd17 File Linking Strategy",id:"-file-linking-strategy",level:3},{value:"Advanced Concepts",id:"advanced-concepts",level:2},{value:"Conditional Configuration",id:"conditional-configuration",level:3},{value:"Asset Templating",id:"asset-templating",level:3},{value:"Multi-Preset Composition",id:"multi-preset-composition",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,r.jsx)(n.p,{children:"Understand the fundamental concepts that make Presetter powerful and flexible."}),"\n",(0,r.jsx)(n.h2,{id:"the-big-picture",children:"The Big Picture"}),"\n",(0,r.jsxs)(n.p,{children:["Presetter solves a common problem: ",(0,r.jsx)(n.strong,{children:"configuration fatigue"}),". Instead of copying build configs across projects or maintaining dozens of development dependencies, Presetter lets you define configurations once and reuse them everywhere."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Your Project] --\x3e B[presetter.config.ts]\n    B --\x3e C[Chosen Preset]\n    C --\x3e D[Generated Configs]\n    C --\x3e E[Installed Dependencies]\n    C --\x3e F[Available Scripts]\n    \n    D --\x3e G[tsconfig.json]\n    D --\x3e H[eslint.config.ts]\n    D --\x3e I[vitest.config.ts]\n    D --\x3e J[.gitignore]\n    \n    E --\x3e K[TypeScript]\n    E --\x3e L[ESLint]\n    E --\x3e M[Vitest]\n    E --\x3e N[Prettier]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"1-presets",children:"1. Presets"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"preset"})," is a reusable bundle of:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,r.jsx)(n.strong,{children:"Dependencies"}),": Tools like TypeScript, ESLint, Vitest"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcc4 ",(0,r.jsx)(n.strong,{children:"Configuration files"}),": tsconfig.json, eslint.config.ts, etc."]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcdc ",(0,r.jsx)(n.strong,{children:"Scripts"}),": build, test, lint commands"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,r.jsx)(n.strong,{children:"Assets"}),": Templates with variable substitution"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// A preset exports a configuration object\nimport { preset } from 'presetter-types';\n\nexport default preset('my-preset', {\n  variables: { /* context data */ },\n  scripts: { /* npm scripts */ },\n  assets: { /* config files */ },\n  override: { /* customizations */ }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-assets",children:"2. Assets"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Assets"})," are configuration files that get generated in your project. They support:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Static content"}),": Direct JSON/text content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variable substitution"}),": Dynamic values from context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function generation"}),": Programmatic config creation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep merging"}),": Combining multiple config sources"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Example asset definitions\nassets: {\n  // Static JSON content\n  'tsconfig.json': {\n    compilerOptions: {\n      target: 'ES2020',\n      module: 'ESNext'\n    }\n  },\n  \n  // Array content (for .gitignore, etc.)\n  '.gitignore': [\n    'node_modules',\n    'dist',\n    '*.log'\n  ],\n  \n  // Function-generated content\n  'vite.config.ts': (current, { variables }) => ({\n    ...current,\n    root: variables.source\n  })\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-variables",children:"3. Variables"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Variables"})," provide context to your configurations. They're available throughout the preset system:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"variables: {\n  source: 'src',        // Source directory\n  output: 'dist',       // Output directory\n  target: 'ES2020',     // TypeScript target\n  node: process.version // Dynamic values\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use variables in assets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"'tsconfig.json': {\n  compilerOptions: {\n    outDir: '{output}',      // Becomes: \"dist\"\n    rootDir: '{source}'      // Becomes: \"src\"\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-scripts",children:"4. Scripts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scripts"})," define npm/pnpm/yarn commands available in your project:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"scripts: {\n  build: 'tsc',\n  test: 'vitest',\n  lint: 'eslint {source}/**/*.ts',\n  'test:watch': 'vitest --watch'\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Presetter merges preset scripts with your local package.json scripts, with local scripts taking priority."}),"\n",(0,r.jsx)(n.h3,{id:"5-context",children:"5. Context"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"context"})," object provides information about your project environment:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Context {\n  root: string;           // Project root directory\n  package: PackageJson;   // Your package.json content\n  custom: Record<string, unknown>; // Custom data\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use context for dynamic presets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { preset } from 'presetter-types';\n\nexport default preset('smart-preset', (context) => {\n  const isReactProject = context.package.dependencies?.react;\n  \n  return {\n    assets: {\n      'eslint.config.ts': isReactProject \n        ? reactEslintConfig \n        : standardEslintConfig\n    }\n  };\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-principles",children:"Key Principles"}),"\n",(0,r.jsx)(n.h3,{id:"-configuration-inheritance",children:"\ud83d\udd04 Configuration Inheritance"}),"\n",(0,r.jsx)(n.p,{children:"Presets can extend other presets, creating inheritance chains:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { preset } from 'presetter-types';\n\n// Base preset\nconst base = preset('base', {\n  scripts: { build: 'tsc' },\n  assets: { 'tsconfig.json': { /* ... */ } }\n});\n\n// Extended preset\nconst react = preset('react', {\n  extends: [base],\n  scripts: { start: 'react-scripts start' },\n  assets: { 'tsconfig.json': { /* React-specific additions */ } }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-override-system",children:"\ud83c\udfaf Override System"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"override"})," field lets you customize inherited configurations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { preset } from 'presetter-types';\n\nexport default preset('my-project', {\n  extends: [basePreset],\n  override: {\n    variables: {\n      source: 'lib'  // Override default 'src'\n    },\n    assets: {\n      'eslint.config.ts': (current) => ({\n        ...current,\n        rules: {\n          ...current.rules,\n          'no-console': 'error'  // Add custom rule\n        }\n      })\n    }\n  }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-automatic-dependency-management",children:"\ud83d\ude80 Automatic Dependency Management"}),"\n",(0,r.jsxs)(n.p,{children:["Presetter automatically installs preset dependencies as ",(0,r.jsx)(n.strong,{children:"peer dependencies"}),", keeping your package.json clean:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// Your package.json stays minimal\n{\n  "devDependencies": {\n    "presetter": "^8.0.0",\n    "presetter-preset-esm": "^8.0.0"\n  }\n}\n\n// But you get all these tools automatically:\n// typescript, eslint, vitest, prettier, etc.\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-file-linking-strategy",children:"\ud83d\udd17 File Linking Strategy"}),"\n",(0,r.jsxs)(n.p,{children:["Configuration files are ",(0,r.jsx)(n.strong,{children:"hard-linked"})," (or symlinked) to your preset, not copied:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Always up-to-date"}),": Changes to preset configs are immediately available"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"No drift"}),": No risk of local configs getting out of sync"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Easy updates"}),": Just update the preset version"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-concepts",children:"Advanced Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"conditional-configuration",children:"Conditional Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Make configurations responsive to project context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { preset } from 'presetter-types';\n\nexport default preset('adaptive', (context) => {\n  const isMonorepo = context.package.workspaces !== undefined;\n  const hasReact = context.package.dependencies?.react;\n  \n  return {\n    assets: {\n      'tsconfig.json': {\n        compilerOptions: {\n          composite: isMonorepo,  // Enable for monorepos\n          jsx: hasReact ? 'react-jsx' : undefined\n        }\n      }\n    }\n  };\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"asset-templating",children:"Asset Templating"}),"\n",(0,r.jsx)(n.p,{children:"Use advanced templating for complex configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  'vite.config.ts': `\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  root: '{source}',\n  build: {\n    outDir: '../{output}'\n  },\n  test: {\n    globals: true\n  }\n});\n  `.trim()\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multi-preset-composition",children:"Multi-Preset Composition"}),"\n",(0,r.jsx)(n.p,{children:"Combine multiple specialized presets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { preset } from 'presetter-types';\nimport typescript from 'presetter-preset-typescript';\nimport testing from 'presetter-preset-testing';\nimport linting from 'presetter-preset-linting';\n\nexport default preset('full-stack', {\n  extends: [typescript, testing, linting],\n  // Each preset contributes its part\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand the concepts:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udee0\ufe0f ",(0,r.jsx)(n.strong,{children:"Configure your setup"}),": ",(0,r.jsx)(n.a,{href:"./configuration",children:"Configuration Guide"})]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcda ",(0,r.jsx)(n.strong,{children:"Explore presets"}),": ",(0,r.jsx)(n.a,{href:"/docs/presets",children:"Preset Ecosystem"})]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,r.jsx)(n.strong,{children:"Create custom presets"}),": ",(0,r.jsx)(n.a,{href:"/docs/tutorials",children:"Tutorials"})]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,r.jsx)(n.strong,{children:"See comparisons"}),": ",(0,r.jsx)(n.a,{href:"./comparison",children:"Presetter vs Others"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);