"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[3398],{8087:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"cli-reference/run-p","title":"presetter run-p","description":"Run multiple scripts in parallel (simultaneously) for maximum performance and efficiency.","source":"@site/docs/cli-reference/run-p.md","sourceDirName":"cli-reference","slug":"/cli-reference/run-p","permalink":"/presetter/docs/cli-reference/run-p","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/cli-reference/run-p.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"presetter run-p"},"sidebar":"tutorialSidebar","previous":{"title":"presetter run-s","permalink":"/presetter/docs/cli-reference/run-s"},"next":{"title":"Preset Ecosystem","permalink":"/presetter/docs/presets/"}}');var r=t(4848),l=t(8453);const i={sidebar_position:5,title:"presetter run-p"},a="presetter run-p",d={},o=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Arguments",id:"arguments",level:2},{value:"<code>&lt;task1&gt; [task2...]</code>",id:"task1-task2",level:3},{value:"<code>-- global-arguments...</code>",id:"---global-arguments",level:3},{value:"Key Differences from run-s",id:"key-differences-from-run-s",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Parallel Execution",id:"basic-parallel-execution",level:3},{value:"Development Servers",id:"development-servers",level:3},{value:"Independent Quality Checks",id:"independent-quality-checks",level:3},{value:"Build Optimization",id:"build-optimization",level:3},{value:"Advanced Argument Handling",id:"advanced-argument-handling",level:2},{value:"Global Arguments",id:"global-arguments",level:3},{value:"Task-Specific Arguments",id:"task-specific-arguments",level:3},{value:"Mixed Arguments",id:"mixed-arguments",level:3},{value:"Argument Substitution",id:"argument-substitution",level:3},{value:"Output Management",id:"output-management",level:2},{value:"Tagged Output",id:"tagged-output",level:3},{value:"Output Strategies",id:"output-strategies",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Parallel Error Behavior",id:"parallel-error-behavior",level:3},{value:"Error Isolation",id:"error-isolation",level:3},{value:"Debugging Parallel Execution",id:"debugging-parallel-execution",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Resource Management",id:"resource-management",level:3},{value:"Memory Usage",id:"memory-usage",level:3},{value:"Optimal Task Selection",id:"optimal-task-selection",level:3},{value:"Real-World Use Cases",id:"real-world-use-cases",level:2},{value:"Development Environment",id:"development-environment",level:3},{value:"CI/CD Optimization",id:"cicd-optimization",level:3},{value:"Content Generation",id:"content-generation",level:3},{value:"Monorepo Operations",id:"monorepo-operations",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"Package.json Scripts",id:"packagejson-scripts",level:3},{value:"Docker Compose Alternative",id:"docker-compose-alternative",level:3},{value:"Watch Mode Development",id:"watch-mode-development",level:3},{value:"Comparison with Other Tools",id:"comparison-with-other-tools",level:2},{value:"vs npm-run-all",id:"vs-npm-run-all",level:3},{value:"vs GNU parallel",id:"vs-gnu-parallel",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"Alternative: Direct Binary",id:"alternative-direct-binary",level:2},{value:"Related Commands",id:"related-commands",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"presetter-run-p",children:"presetter run-p"})}),"\n",(0,r.jsx)(n.p,{children:"Run multiple scripts in parallel (simultaneously) for maximum performance and efficiency."}),"\n",(0,r.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"presetter run-p <task1> [task2...] [-- global-arguments...]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"run-p"})," command executes multiple tasks simultaneously, allowing for:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parallel execution"})," - All tasks start at the same time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance optimization"})," - Faster overall completion"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Independent task handling"})," - Tasks don't depend on each other"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comprehensive error reporting"})," - Waits for all tasks to complete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced argument handling"})," - Same as ",(0,r.jsx)(n.code,{children:"run-s"})," but for parallel execution"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This is ideal for independent tasks like linting + testing, multiple builds, or development servers."}),"\n",(0,r.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h3,{id:"task1-task2",children:(0,r.jsx)(n.code,{children:"<task1> [task2...]"})}),"\n",(0,r.jsx)(n.p,{children:"One or more task names or patterns to execute simultaneously. Each task can be:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simple task name"}),": ",(0,r.jsx)(n.code,{children:"lint"}),", ",(0,r.jsx)(n.code,{children:"test"}),", ",(0,r.jsx)(n.code,{children:"typecheck"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Task with arguments"}),": ",(0,r.jsx)(n.code,{children:'"test -- --watch"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern selector"}),": ",(0,r.jsx)(n.code,{children:'"test:*"'}),", ",(0,r.jsx)(n.code,{children:'"build:**"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quoted complex tasks"}),": ",(0,r.jsx)(n.code,{children:'"dev:server -- --port 3000"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"---global-arguments",children:(0,r.jsx)(n.code,{children:"-- global-arguments..."})}),"\n",(0,r.jsxs)(n.p,{children:["Arguments after ",(0,r.jsx)(n.code,{children:"--"})," are treated as global arguments passed to all tasks."]}),"\n",(0,r.jsx)(n.h2,{id:"key-differences-from-run-s",children:"Key Differences from run-s"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"run-s (Sequential)"}),(0,r.jsx)(n.th,{children:"run-p (Parallel)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Execution"})}),(0,r.jsx)(n.td,{children:"One after another"}),(0,r.jsx)(n.td,{children:"All at once"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Speed"})}),(0,r.jsx)(n.td,{children:"Sum of all task times"}),(0,r.jsx)(n.td,{children:"Time of slowest task"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Dependencies"})}),(0,r.jsx)(n.td,{children:"Tasks can depend on previous"}),(0,r.jsx)(n.td,{children:"Tasks must be independent"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Resource usage"})}),(0,r.jsx)(n.td,{children:"Lower peak usage"}),(0,r.jsx)(n.td,{children:"Higher peak usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Error handling"})}),(0,r.jsx)(n.td,{children:"Stops on first failure"}),(0,r.jsx)(n.td,{children:"Reports all failures"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Output"})}),(0,r.jsx)(n.td,{children:"Clean, sequential"}),(0,r.jsx)(n.td,{children:"Interleaved, tagged"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-parallel-execution",children:"Basic Parallel Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run independent tasks simultaneously\npresetter run-p lint test typecheck\n\n# Development workflow\npresetter run-p "dev:server" "dev:client" "test:watch"\n\n# Build multiple formats\npresetter run-p "build:cjs" "build:esm" "build:types"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"development-servers",children:"Development Servers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run multiple development servers\npresetter run-p \\\n  "dev:api -- --port 3001" \\\n  "dev:web -- --port 3000" \\\n  "dev:docs -- --port 3002"\n\n# Full-stack development\npresetter run-p \\\n  "backend:dev" \\\n  "frontend:dev" \\\n  "db:watch" \\\n  "test:watch"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"independent-quality-checks",children:"Independent Quality Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run all quality checks simultaneously\npresetter run-p \\\n  "lint" \\\n  "typecheck" \\\n  "test:unit" \\\n  "security:audit"\n\n# Multiple test suites\npresetter run-p \\\n  "test:unit" \\\n  "test:integration" \\\n  "test:e2e" \\\n  -- --coverage\n'})}),"\n",(0,r.jsx)(n.h3,{id:"build-optimization",children:"Build Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Build multiple targets in parallel\npresetter run-p \\\n  "build:main" \\\n  "build:worker" \\\n  "build:styles" \\\n  "build:assets"\n\n# Cross-platform builds\npresetter run-p \\\n  "build:linux" \\\n  "build:windows" \\\n  "build:macos"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-argument-handling",children:"Advanced Argument Handling"}),"\n",(0,r.jsx)(n.h3,{id:"global-arguments",children:"Global Arguments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Pass arguments to all parallel tasks\npresetter run-p lint test build -- --verbose --timing\n\n# All tasks receive --verbose and --timing\n"})}),"\n",(0,r.jsx)(n.h3,{id:"task-specific-arguments",children:"Task-Specific Arguments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Each task gets its own arguments\npresetter run-p \\\n  "dev:server -- --port 3000 --open" \\\n  "test:watch -- --coverage" \\\n  "lint:watch -- --fix"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mixed-arguments",children:"Mixed Arguments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Combine task-specific and global arguments\npresetter run-p \\\n  "test -- --watch" \\\n  "lint -- --fix" \\\n  typecheck \\\n  -- --verbose\n\n# Expands to:\n# test --watch --verbose (parallel)\n# lint --fix --verbose (parallel)\n# typecheck --verbose (parallel)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"argument-substitution",children:"Argument Substitution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Use {@} for global argument injection\npresetter run-p \\\n  "test -- {@} --watch" \\\n  "lint -- --cache {@}" \\\n  "build -- {@} --watch" \\\n  -- --verbose --progress\n\n# Results in parallel execution of:\n# test --verbose --progress --watch\n# lint --cache --verbose --progress  \n# build --verbose --progress --watch\n'})}),"\n",(0,r.jsx)(n.h2,{id:"output-management",children:"Output Management"}),"\n",(0,r.jsx)(n.h3,{id:"tagged-output",children:"Tagged Output"}),"\n",(0,r.jsx)(n.p,{children:"Parallel tasks produce interleaved output with task tags:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[lint] \u2713 No ESLint errors found\n[test] Running test suite...\n[typecheck] Checking types...\n[test] \u2713 15 tests passed\n[typecheck] \u2713 No type errors\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output-strategies",children:"Output Strategies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Redirect output for cleaner logs\npresetter run-p \\\n  "lint > lint.log 2>&1" \\\n  "test > test.log 2>&1" \\\n  "build > build.log 2>&1"\n\n# Use different verbosity levels\npresetter run-p \\\n  "lint -- --quiet" \\\n  "test -- --silent" \\\n  "typecheck -- --verbose"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"parallel-error-behavior",children:"Parallel Error Behavior"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# All tasks run to completion, then report failures\npresetter run-p lint test build\n\n# Exit codes:\n# 0 - All tasks succeeded\n# Non-zero - At least one task failed\n"})}),"\n",(0,r.jsx)(n.h3,{id:"error-isolation",children:"Error Isolation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# One failing task doesn\'t stop others\npresetter run-p \\\n  "lint" \\\n  "test" \\\n  "failing-task"  # This fails, but lint and test continue\n\n# Use error handling in individual tasks\npresetter run-p \\\n  "lint || echo \'Lint failed\'" \\\n  "test || echo \'Tests failed\'" \\\n  "build"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"debugging-parallel-execution",children:"Debugging Parallel Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Enable debug mode\nDEBUG=presetter:* presetter run-p lint test build\n\n# Add timing information\npresetter run-p \\\n  "lint" \\\n  "test" \\\n  "build" \\\n  -- --timing\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# CPU-intensive tasks\npresetter run-p \\\n  "build:main" \\\n  "build:worker"  # May compete for CPU\n\n# I/O-intensive tasks (better for parallel)\npresetter run-p \\\n  "test:api" \\\n  "test:db" \\\n  "lint:files"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"memory-usage",children:"Memory Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Monitor memory usage with parallel tasks\npresetter run-p \\\n  "test -- --max-memory 512MB" \\\n  "build -- --memory-limit 1GB" \\\n  "lint"\n\n# Limit concurrent operations\nNODE_OPTIONS="--max-old-space-size=4096" \\\npresetter run-p build:large test:memory-intensive\n'})}),"\n",(0,r.jsx)(n.h3,{id:"optimal-task-selection",children:"Optimal Task Selection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Good: Independent tasks\npresetter run-p lint test typecheck format\n\n# Good: I/O bound tasks\npresetter run-p \\\n  "download:assets" \\\n  "fetch:dependencies" \\\n  "validate:schemas"\n\n# Avoid: Dependent tasks\n# Don\'t run: build and test (test might need build output)\n# Don\'t run: clean and build (clean removes build artifacts)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"real-world-use-cases",children:"Real-World Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"development-environment",children:"Development Environment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Complete development setup\npresetter run-p \\\n  "api:dev -- --port 3001" \\\n  "web:dev -- --port 3000" \\\n  "docs:dev -- --port 3002" \\\n  "test:watch -- --coverage" \\\n  "lint:watch -- --fix"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cicd-optimization",children:"CI/CD Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Parallel quality checks\npresetter run-p \\\n  "lint -- --format junit" \\\n  "test:unit -- --reporter junit" \\\n  "test:integration -- --reporter junit" \\\n  "security:audit -- --json" \\\n  "dependency:check"\n\n# Multi-platform builds\npresetter run-p \\\n  "build:docker:linux" \\\n  "build:docker:alpine" \\\n  "build:binary:linux" \\\n  "build:binary:windows"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"content-generation",children:"Content Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Generate multiple content types\npresetter run-p \\\n  "docs:api" \\\n  "docs:guides" \\\n  "images:optimize" \\\n  "translations:compile"\n\n# Asset processing\npresetter run-p \\\n  "images:resize" \\\n  "css:compile" \\\n  "js:bundle" \\\n  "fonts:subset"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"monorepo-operations",children:"Monorepo Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Build all packages simultaneously\npresetter run-p \\\n  "build:core" \\\n  "build:utils" \\\n  "build:ui" \\\n  "build:cli"\n\n# Test all packages\npresetter run-p \\\n  "test:core" \\\n  "test:utils" \\\n  "test:ui" \\\n  "test:integration"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"packagejson-scripts",children:"Package.json Scripts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  \"scripts\": {\n    \"dev\": \"presetter run-p 'api:dev' 'web:dev' 'test:watch'\",\n    \"check\": \"presetter run-p lint typecheck test\",\n    \"build:all\": \"presetter run-p 'build:lib' 'build:types' 'build:docs'\",\n    \"start:services\": \"presetter run-p 'start:api' 'start:worker' 'start:scheduler'\"\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"docker-compose-alternative",children:"Docker Compose Alternative"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Instead of docker-compose, use presetter run-p\npresetter run-p \\\n  "redis:start" \\\n  "postgres:start" \\\n  "api:start" \\\n  "worker:start"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"watch-mode-development",children:"Watch Mode Development"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# All watch modes in parallel\npresetter run-p \\\n  "src:watch -- --reload" \\\n  "test:watch -- --coverage" \\\n  "docs:watch -- --open" \\\n  "lint:watch -- --fix"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"comparison-with-other-tools",children:"Comparison with Other Tools"}),"\n",(0,r.jsx)(n.h3,{id:"vs-npm-run-all",children:"vs npm-run-all"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# npm-run-all\nnpm-run-all --parallel lint test build\n\n# presetter run-p (equivalent)\npresetter run-p lint test build\n\n# But presetter adds:\n# - Pattern matching\n# - Advanced argument handling\n# - Template script support\n"})}),"\n",(0,r.jsx)(n.h3,{id:"vs-gnu-parallel",children:"vs GNU parallel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# GNU parallel\nparallel ::: "npm run lint" "npm run test" "npm run build"\n\n# presetter run-p (simpler)\npresetter run-p lint test build\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Port conflicts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Ensure different ports for dev servers\npresetter run-p \\\n  "api:dev -- --port 3001" \\\n  "web:dev -- --port 3000"  # Different ports\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Resource exhaustion:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Limit concurrent tasks\nulimit -n 4096  # Increase file descriptor limit\npresetter run-p task1 task2 task3\n\n# Or run fewer tasks simultaneously\npresetter run-p task1 task2\npresetter run-p task3 task4\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output confusion:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Use output redirection for clarity\npresetter run-p \\\n  \"lint 2>&1 | sed 's/^/[LINT] /'\" \\\n  \"test 2>&1 | sed 's/^/[TEST] /'\"\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Profile parallel execution\ntime presetter run-p lint test build\n\n# Compare with sequential\ntime presetter run-s lint test build\n\n# Monitor resource usage\ntop -p $(pgrep -f "presetter run-p")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"alternative-direct-binary",children:"Alternative: Direct Binary"}),"\n",(0,r.jsxs)(n.p,{children:["Use the standalone ",(0,r.jsx)(n.code,{children:"run-p"})," binary:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# These are equivalent\npresetter run-p lint test build\nrun-p lint test build\n\n# Both support the same features\nrun-p "dev:server -- --port 3000" "test:watch"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-commands",children:"Related Commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run",children:(0,r.jsx)(n.code,{children:"presetter run"})})})," - Run a single task"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run-s",children:(0,r.jsx)(n.code,{children:"presetter run-s"})})})," - Run multiple tasks sequentially"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./bootstrap",children:(0,r.jsx)(n.code,{children:"presetter bootstrap"})})})," - Setup project configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/getting-started",children:"Getting Started Guide"})," - Basic task execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/configuration",children:"Configuration Guide"})," - Customizing scripts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/advanced",children:"Advanced Topics"})," - Performance optimization"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},l=s.createContext(r);function i(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);