"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[4736],{7260:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"introduction/configuration","title":"Configuration","description":"Learn how to customize Presetter to fit your exact needs through the presetter.config.ts file.","source":"@site/docs/introduction/configuration.md","sourceDirName":"introduction","slug":"/introduction/configuration","permalink":"/presetter/docs/introduction/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/introduction/configuration.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Configuration"},"sidebar":"tutorialSidebar","previous":{"title":"Presetter vs Others","permalink":"/presetter/docs/introduction/comparison"},"next":{"title":"CLI Reference","permalink":"/presetter/docs/cli-reference/"}}');var i=s(4848),r=s(8453);const o={sidebar_position:6,title:"Configuration"},a="Configuration Guide",c={},l=[{value:"Configuration File Structure",id:"configuration-file-structure",level:2},{value:"Basic Configuration Patterns",id:"basic-configuration-patterns",level:2},{value:"1. Simple Preset Usage",id:"1-simple-preset-usage",level:3},{value:"2. Light Customization",id:"2-light-customization",level:3},{value:"3. Multiple Preset Composition",id:"3-multiple-preset-composition",level:3},{value:"Variables Configuration",id:"variables-configuration",level:2},{value:"Common Variables",id:"common-variables",level:3},{value:"Dynamic Variables",id:"dynamic-variables",level:3},{value:"Variable Usage in Assets",id:"variable-usage-in-assets",level:3},{value:"Scripts Configuration",id:"scripts-configuration",level:2},{value:"Basic Scripts",id:"basic-scripts",level:3},{value:"Script Composition",id:"script-composition",level:3},{value:"Script Merging",id:"script-merging",level:3},{value:"Assets Configuration",id:"assets-configuration",level:2},{value:"JSON Configuration Files",id:"json-configuration-files",level:3},{value:"Array-Based Files",id:"array-based-files",level:3},{value:"Template-Based Files",id:"template-based-files",level:3},{value:"Function-Generated Assets",id:"function-generated-assets",level:3},{value:"Override System",id:"override-system",level:2},{value:"Variable Overrides",id:"variable-overrides",level:3},{value:"Script Overrides",id:"script-overrides",level:3},{value:"Asset Overrides",id:"asset-overrides",level:3},{value:"Deep Merging",id:"deep-merging",level:4},{value:"Function-Based Overrides",id:"function-based-overrides",level:4},{value:"Removing Assets",id:"removing-assets",level:4},{value:"Advanced Configuration Patterns",id:"advanced-configuration-patterns",level:2},{value:"Context-Aware Configuration",id:"context-aware-configuration",level:3},{value:"Environment-Based Configuration",id:"environment-based-configuration",level:3},{value:"Conditional Asset Generation",id:"conditional-asset-generation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Start Simple",id:"1-start-simple",level:3},{value:"2. Use Variables for Consistency",id:"2-use-variables-for-consistency",level:3},{value:"3. Prefer Override for Customizations",id:"3-prefer-override-for-customizations",level:3},{value:"4. Document Your Configuration",id:"4-document-your-configuration",level:3},{value:"Troubleshooting Configuration",id:"troubleshooting-configuration",level:2},{value:"Debug Configuration Resolution",id:"debug-configuration-resolution",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"configuration-guide",children:"Configuration Guide"})}),"\n",(0,i.jsxs)(n.p,{children:["Learn how to customize Presetter to fit your exact needs through the ",(0,i.jsx)(n.code,{children:"presetter.config.ts"})," file."]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-file-structure",children:"Configuration File Structure"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"presetter.config.ts"})," file is the heart of your Presetter setup:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// presetter.config.ts\nimport { preset } from 'presetter-types';\nimport esm from 'presetter-preset-esm';\n\nexport default preset('my-project', {\n  extends: [esm],           // Inherit from other presets\n  variables: {              // Define context variables\n    source: 'src',\n    output: 'dist'\n  },\n  scripts: {               // Define npm scripts\n    start: 'node dist/index.js'\n  },\n  assets: {                // Define configuration files\n    'tsconfig.json': {\n      // TypeScript configuration\n    }\n  },\n  override: {              // Override inherited configurations\n    // Applied after everything else\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-configuration-patterns",children:"Basic Configuration Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-simple-preset-usage",children:"1. Simple Preset Usage"}),"\n",(0,i.jsx)(n.p,{children:"Use a preset as-is without any customization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// presetter.config.ts\nexport { default } from 'presetter-preset-esm';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-light-customization",children:"2. Light Customization"}),"\n",(0,i.jsx)(n.p,{children:"Extend a preset with minor modifications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import esm from 'presetter-preset-esm';\nimport { preset } from 'presetter-types';\n\nexport default preset('my-app', {\n  extends: [esm],\n  variables: {\n    source: 'lib',          // Change from default 'src'\n    target: 'ES2022'        // Update TypeScript target\n  },\n  scripts: {\n    start: 'node dist/app.js'  // Add custom start script\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-multiple-preset-composition",children:"3. Multiple Preset Composition"}),"\n",(0,i.jsx)(n.p,{children:"Combine multiple presets for complex setups:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import base from 'presetter-preset-essentials';\nimport react from 'presetter-preset-react';\nimport { preset } from 'presetter-types';\n\nexport default preset('full-stack-react', {\n  extends: [base, react],\n  // Each preset contributes its configurations\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"variables-configuration",children:"Variables Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Variables"})," provide dynamic values to your configurations:"]}),"\n",(0,i.jsx)(n.h3,{id:"common-variables",children:"Common Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"variables: {\n  // Directories\n  source: 'src',              // Source code directory\n  output: 'dist',             // Build output directory\n  test: 'tests',              // Test directory\n  \n  // Build settings\n  target: 'ES2022',           // TypeScript/Babel target\n  module: 'ESNext',           // Module system\n  \n  // Project info\n  name: 'my-awesome-app',     // Project name\n  description: 'An awesome app'\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-variables",children:"Dynamic Variables"}),"\n",(0,i.jsx)(n.p,{children:"Use functions for context-aware variables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"variables: {\n  // Read from package.json\n  name: (context) => context.package.name,\n  \n  // Environment-based\n  nodeVersion: process.version,\n  \n  // Computed values\n  testPattern: (context) => `${context.variables.source}/**/*.test.ts`\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variable-usage-in-assets",children:"Variable Usage in Assets"}),"\n",(0,i.jsx)(n.p,{children:"Reference variables in configuration files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  'tsconfig.json': {\n    compilerOptions: {\n      outDir: '{output}',       // Becomes: \"dist\"\n      rootDir: '{source}',      // Becomes: \"src\"\n      target: '{target}'        // Becomes: \"ES2022\"\n    },\n    include: ['{source}/**/*']\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"scripts-configuration",children:"Scripts Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scripts"})," define the npm/pnpm/yarn commands available in your project:"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-scripts",children:"Basic Scripts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"scripts: {\n  // Build commands\n  build: 'tsc',\n  'build:watch': 'tsc --watch',\n  \n  // Testing\n  test: 'vitest',\n  'test:watch': 'vitest --watch',\n  'test:ui': 'vitest --ui',\n  coverage: 'vitest --coverage',\n  \n  // Linting\n  lint: 'eslint {source}/**/*.ts',\n  'lint:fix': 'eslint {source}/**/*.ts --fix',\n  \n  // Formatting\n  format: 'prettier --write {source}/**/*.ts',\n  'format:check': 'prettier --check {source}/**/*.ts'\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"script-composition",children:"Script Composition"}),"\n",(0,i.jsx)(n.p,{children:"Combine multiple commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"scripts: {\n  // Sequential execution\n  ci: 'npm run lint && npm run test && npm run build',\n  \n  // Parallel execution (with npm-run-all)\n  'dev:all': 'run-p dev:server dev:client',\n  \n  // Conditional scripts\n  precommit: 'lint-staged',\n  prepublishOnly: 'npm run ci'\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"script-merging",children:"Script Merging"}),"\n",(0,i.jsx)(n.p,{children:"Local package.json scripts take priority over preset scripts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Preset scripts\nscripts: {\n  build: \'tsc\',\n  test: \'vitest\'\n}\n\n// Your package.json\n{\n  "scripts": {\n    "build": "vite build",  // Overrides preset\n    "dev": "vite dev"       // Adds to preset\n  }\n}\n\n// Result: build uses Vite, test uses Vitest, dev available\n'})}),"\n",(0,i.jsx)(n.h2,{id:"assets-configuration",children:"Assets Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Assets"})," are configuration files generated in your project:"]}),"\n",(0,i.jsx)(n.h3,{id:"json-configuration-files",children:"JSON Configuration Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  'tsconfig.json': {\n    compilerOptions: {\n      target: '{target}',\n      module: '{module}',\n      outDir: '{output}',\n      rootDir: '{source}',\n      strict: true,\n      esModuleInterop: true,\n      skipLibCheck: true\n    },\n    include: ['{source}/**/*'],\n    exclude: ['node_modules', '{output}']\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"array-based-files",children:"Array-Based Files"}),"\n",(0,i.jsx)(n.p,{children:"Great for .gitignore, .eslintignore, etc.:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  '.gitignore': [\n    'node_modules',\n    '{output}',\n    '*.log',\n    '.env.local',\n    'coverage',\n    '.nyc_output'\n  ],\n  \n  '.eslintignore': [\n    '{output}',\n    'node_modules',\n    '*.d.ts'\n  ]\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"template-based-files",children:"Template-Based Files"}),"\n",(0,i.jsx)(n.p,{children:"Generate complex configuration files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  'vite.config.ts': `\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  root: '{source}',\n  build: {\n    outDir: '../{output}',\n    target: '{target}'\n  },\n  test: {\n    globals: true,\n    environment: 'jsdom'\n  }\n});\n  `.trim()\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"function-generated-assets",children:"Function-Generated Assets"}),"\n",(0,i.jsx)(n.p,{children:"For complex, dynamic configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  'eslint.config.ts': (current, { variables, context }) => {\n    const config = {\n      ...current,\n      languageOptions: {\n        parserOptions: {\n          ecmaVersion: variables.target === 'ES2022' ? 2022 : 2020\n        }\n      }\n    };\n    \n    // Add React rules if React is detected\n    if (context.package.dependencies?.react) {\n      config.plugins = {\n        ...config.plugins,\n        react: require('eslint-plugin-react')\n      };\n    }\n    \n    return config;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"override-system",children:"Override System"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"override"})," field allows you to customize inherited configurations:"]}),"\n",(0,i.jsx)(n.h3,{id:"variable-overrides",children:"Variable Overrides"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"override: {\n  variables: {\n    // Override inherited variables\n    source: 'lib',            // Change from 'src'\n    target: 'ES2023',         // Update target\n    \n    // Add new variables\n    customPath: 'custom/path'\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"script-overrides",children:"Script Overrides"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"override: {\n  scripts: {\n    // Replace inherited script\n    build: 'rollup -c',\n    \n    // Add new scripts\n    deploy: 'npm run build && gh-pages -d dist'\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"asset-overrides",children:"Asset Overrides"}),"\n",(0,i.jsx)(n.h4,{id:"deep-merging",children:"Deep Merging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"override: {\n  assets: {\n    'tsconfig.json': {\n      compilerOptions: {\n        // Merged with existing compilerOptions\n        strict: false,          // Override inherited setting\n        noImplicitAny: true     // Add new setting\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"function-based-overrides",children:"Function-Based Overrides"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"override: {\n  assets: {\n    'eslint.config.ts': (current, { variables }) => ({\n      ...current,\n      rules: {\n        ...current.rules,\n        // Add custom rules\n        'no-console': 'warn',\n        '@typescript-eslint/no-unused-vars': [\n          'error',\n          { argsIgnorePattern: '^_' }\n        ]\n      }\n    })\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"removing-assets",children:"Removing Assets"}),"\n",(0,i.jsxs)(n.p,{children:["Set assets to ",(0,i.jsx)(n.code,{children:"null"})," to prevent their generation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"override: {\n  assets: {\n    '.prettierrc': null,      // Don't generate Prettier config\n    'vitest.config.ts': null  // Don't generate Vitest config\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-configuration-patterns",children:"Advanced Configuration Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"context-aware-configuration",children:"Context-Aware Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Make configurations responsive to project context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export default preset('adaptive', (context) => {\n  const isMonorepo = context.package.workspaces !== undefined;\n  const hasReact = context.package.dependencies?.react;\n  const isLibrary = context.package.main !== undefined;\n  \n  return {\n    variables: {\n      target: isLibrary ? 'ES2018' : 'ES2022',\n      format: isLibrary ? 'cjs' : 'esm'\n    },\n    \n    assets: {\n      'tsconfig.json': {\n        compilerOptions: {\n          composite: isMonorepo,\n          jsx: hasReact ? 'react-jsx' : undefined,\n          declaration: isLibrary\n        }\n      }\n    }\n  };\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-based-configuration",children:"Environment-Based Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export default preset('env-aware', {\n  variables: {\n    isDev: process.env.NODE_ENV === 'development',\n    isProd: process.env.NODE_ENV === 'production'\n  },\n  \n  override: {\n    assets: {\n      'vite.config.ts': (current, { variables }) => ({\n        ...current,\n        build: {\n          ...current.build,\n          minify: variables.isProd,\n          sourcemap: variables.isDev\n        }\n      })\n    }\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-asset-generation",children:"Conditional Asset Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"assets: {\n  // Only generate Storybook config if Storybook is installed\n  '.storybook/main.ts': (current, { context }) => {\n    if (!context.package.devDependencies?.['@storybook/react']) {\n      return null;  // Don't generate this file\n    }\n    \n    return {\n      stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],\n      addons: ['@storybook/addon-essentials']\n    };\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-start-simple",children:"1. Start Simple"}),"\n",(0,i.jsx)(n.p,{children:"Begin with a basic preset and add customizations incrementally:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Start here\nexport { default } from 'presetter-preset-esm';\n\n// Then customize\nimport esm from 'presetter-preset-esm';\nexport default preset('my-project', {\n  extends: [esm],\n  variables: { source: 'lib' }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-use-variables-for-consistency",children:"2. Use Variables for Consistency"}),"\n",(0,i.jsx)(n.p,{children:"Define paths and settings once:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"variables: {\n  source: 'src',\n  output: 'dist',\n  test: 'test'\n},\n\nassets: {\n  'tsconfig.json': {\n    compilerOptions: {\n      rootDir: '{source}',\n      outDir: '{output}'\n    }\n  },\n  'vitest.config.ts': {\n    test: {\n      include: ['{test}/**/*.test.ts']\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-prefer-override-for-customizations",children:"3. Prefer Override for Customizations"}),"\n",(0,i.jsx)(n.p,{children:"Use the override field for modifications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Override ensures changes are applied last\noverride: {\n  assets: {\n    'eslint.config.ts': (current) => ({\n      ...current,\n      rules: { ...current.rules, 'no-console': 'warn' }\n    })\n  }\n}\n\n// Avoid: Direct asset modification may be overridden\nassets: {\n  'eslint.config.ts': { rules: { 'no-console': 'warn' } }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-document-your-configuration",children:"4. Document Your Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Add comments to explain custom configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export default preset('my-project', {\n  extends: [esm],\n  \n  variables: {\n    // Use 'lib' instead of 'src' to match legacy structure\n    source: 'lib'\n  },\n  \n  override: {\n    assets: {\n      'tsconfig.json': {\n        compilerOptions: {\n          // Allow importing JSON files for configuration\n          resolveJsonModule: true\n        }\n      }\n    }\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting-configuration",children:"Troubleshooting Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"debug-configuration-resolution",children:"Debug Configuration Resolution"}),"\n",(0,i.jsx)(n.p,{children:"Use the Presetter CLI to inspect resolved configurations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# View resolved variables\nnpx presetter list variables\n\n# View resolved scripts\nnpx presetter list scripts\n\n# View generated assets\nnpx presetter list assets\n"})}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Variables not being substituted"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Wrong: Missing braces\n'rootDir': 'source'\n\n// Correct: Use braces for variable substitution\n'rootDir': '{source}'\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Assets not being generated"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check if asset is set to null in override\noverride: {\n  assets: {\n    'tsconfig.json': null  // This prevents generation\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Script conflicts"}),":\nLocal package.json scripts always take priority over preset scripts."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Apply your knowledge"}),": Try ",(0,i.jsx)(n.a,{href:"/docs/tutorials",children:"Tutorials"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcda ",(0,i.jsx)(n.strong,{children:"Explore presets"}),": Browse ",(0,i.jsx)(n.a,{href:"/docs/presets",children:"Preset Ecosystem"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,i.jsx)(n.strong,{children:"Reference"}),": Check ",(0,i.jsx)(n.a,{href:"/docs/cli-reference",children:"CLI Reference"})]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,i.jsx)(n.strong,{children:"Create presets"}),": See ",(0,i.jsx)(n.a,{href:"/docs/tutorials",children:"Tutorials"})," for custom preset guides"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);