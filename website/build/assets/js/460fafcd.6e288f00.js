"use strict";(self.webpackChunkpresetter_website=self.webpackChunkpresetter_website||[]).push([[7087],{199:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"cli-reference/run-s","title":"presetter run-s","description":"Run multiple scripts sequentially (one after another) with sophisticated argument handling.","source":"@site/docs/cli-reference/run-s.md","sourceDirName":"cli-reference","slug":"/cli-reference/run-s","permalink":"/presetter/docs/cli-reference/run-s","draft":false,"unlisted":false,"editUrl":"https://github.com/alvis/presetter/tree/master/website/docs/cli-reference/run-s.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"presetter run-s"},"sidebar":"tutorialSidebar","previous":{"title":"presetter run","permalink":"/presetter/docs/cli-reference/run"},"next":{"title":"presetter run-p","permalink":"/presetter/docs/cli-reference/run-p"}}');var r=s(4848),i=s(8453);const l={sidebar_position:4,title:"presetter run-s"},a="presetter run-s",d={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Arguments",id:"arguments",level:2},{value:"<code>&lt;task1&gt; [task2...]</code>",id:"task1-task2",level:3},{value:"<code>-- global-arguments...</code>",id:"---global-arguments",level:3},{value:"Argument Handling",id:"argument-handling",level:2},{value:"Global Arguments",id:"global-arguments",level:3},{value:"Task-Specific Arguments",id:"task-specific-arguments",level:3},{value:"Mixed Argument Types",id:"mixed-argument-types",level:3},{value:"Argument Substitution with <code>{@}</code>",id:"argument-substitution-with-",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Sequential Execution",id:"basic-sequential-execution",level:3},{value:"Development Workflows",id:"development-workflows",level:3},{value:"CI/CD Pipelines",id:"cicd-pipelines",level:3},{value:"Pattern-Based Workflows",id:"pattern-based-workflows",level:3},{value:"Environment-Specific Pipelines",id:"environment-specific-pipelines",level:3},{value:"Advanced Argument Handling",id:"advanced-argument-handling",level:2},{value:"Complex Argument Substitution",id:"complex-argument-substitution",level:3},{value:"Quote Handling",id:"quote-handling",level:3},{value:"Dynamic Task Generation",id:"dynamic-task-generation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Fail-Fast Behavior",id:"fail-fast-behavior",level:3},{value:"Error Recovery",id:"error-recovery",level:3},{value:"Debugging Failed Pipelines",id:"debugging-failed-pipelines",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Efficient Sequencing",id:"efficient-sequencing",level:3},{value:"Caching Integration",id:"caching-integration",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"Package.json Scripts",id:"packagejson-scripts",level:3},{value:"GitHub Actions",id:"github-actions",level:3},{value:"Docker Integration",id:"docker-integration",level:3},{value:"Alternative: Direct Binary",id:"alternative-direct-binary",level:2},{value:"Comparison with run-p",id:"comparison-with-run-p",level:2},{value:"Related Commands",id:"related-commands",level:2},{value:"See Also",id:"see-also",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"presetter-run-s",children:"presetter run-s"})}),"\n",(0,r.jsx)(n.p,{children:"Run multiple scripts sequentially (one after another) with sophisticated argument handling."}),"\n",(0,r.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"presetter run-s <task1> [task2...] [-- global-arguments...]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"run-s"})," command executes multiple tasks in sequence, where each task must complete successfully before the next one starts. It provides:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sequential execution"})," - Tasks run one after another"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fail-fast behavior"})," - Stops on first failure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced argument handling"})," - Global and task-specific arguments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern matching"})," - Supports wildcards and selectors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Argument substitution"})," - Dynamic argument injection with ",(0,r.jsx)(n.code,{children:"{@}"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This is ideal for CI/CD pipelines, build chains, and workflows where order matters."}),"\n",(0,r.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsx)(n.h3,{id:"task1-task2",children:(0,r.jsx)(n.code,{children:"<task1> [task2...]"})}),"\n",(0,r.jsx)(n.p,{children:"One or more task names or patterns to execute in order. Each task can be:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simple task name"}),": ",(0,r.jsx)(n.code,{children:"lint"}),", ",(0,r.jsx)(n.code,{children:"test"}),", ",(0,r.jsx)(n.code,{children:"build"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Task with arguments"}),": ",(0,r.jsx)(n.code,{children:'"test -- --coverage"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern selector"}),": ",(0,r.jsx)(n.code,{children:'"test:*"'}),", ",(0,r.jsx)(n.code,{children:'"build:**"'})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quoted complex tasks"}),": ",(0,r.jsx)(n.code,{children:'"lint -- --ext .ts,.tsx --fix"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"---global-arguments",children:(0,r.jsx)(n.code,{children:"-- global-arguments..."})}),"\n",(0,r.jsxs)(n.p,{children:["Arguments after ",(0,r.jsx)(n.code,{children:"--"})," are treated as global arguments passed to all tasks."]}),"\n",(0,r.jsx)(n.h2,{id:"argument-handling",children:"Argument Handling"}),"\n",(0,r.jsx)(n.h3,{id:"global-arguments",children:"Global Arguments"}),"\n",(0,r.jsxs)(n.p,{children:["Arguments after ",(0,r.jsx)(n.code,{children:"--"})," are passed to ALL tasks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Pass --verbose to all tasks\npresetter run-s lint test build -- --verbose\n\n# Equivalent to:\npresetter run lint -- --verbose\npresetter run test -- --verbose  \npresetter run build -- --verbose\n"})}),"\n",(0,r.jsx)(n.h3,{id:"task-specific-arguments",children:"Task-Specific Arguments"}),"\n",(0,r.jsx)(n.p,{children:"Use quotes to specify arguments for individual tasks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Each task gets its own arguments\npresetter run-s \\\n  "lint -- --fix" \\\n  "test -- --coverage" \\\n  "build -- --minify"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mixed-argument-types",children:"Mixed Argument Types"}),"\n",(0,r.jsx)(n.p,{children:"Combine task-specific and global arguments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Task-specific args + global args\npresetter run-s \\\n  "lint -- --fix" \\\n  "test -- --coverage" \\\n  build \\\n  -- --verbose --strict\n\n# Expands to:\n# lint --fix --verbose --strict\n# test --coverage --verbose --strict  \n# build --verbose --strict\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"argument-substitution-with-",children:["Argument Substitution with ",(0,r.jsx)(n.code,{children:"{@}"})]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"{@}"})," to inject global arguments at specific positions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Insert global args at specific positions\npresetter run-s \\\n  "test -- {@} --coverage" \\\n  "lint -- --fix {@}" \\\n  "build -- --mode prod {@}" \\\n  -- --verbose --progress\n\n# Expands to:\n# test --verbose --progress --coverage\n# lint --fix --verbose --progress\n# build --mode prod --verbose --progress\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-sequential-execution",children:"Basic Sequential Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Simple sequence\npresetter run-s clean build\n\n# Longer pipeline\npresetter run-s clean lint test build package\n\n# With global arguments\npresetter run-s lint test build -- --verbose\n"})}),"\n",(0,r.jsx)(n.h3,{id:"development-workflows",children:"Development Workflows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Pre-commit pipeline\npresetter run-s \\\n  "lint -- --fix" \\\n  "test -- --coverage" \\\n  "typecheck"\n\n# Build pipeline\npresetter run-s \\\n  clean \\\n  "build:types" \\\n  "build:lib" \\\n  "build:docs"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cicd-pipelines",children:"CI/CD Pipelines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Complete CI pipeline\npresetter run-s \\\n  "install" \\\n  "lint -- --format junit" \\\n  "test -- --reporter json --coverage" \\\n  "build -- --mode production" \\\n  "package" \\\n  -- --verbose --strict\n\n# Quality gates\npresetter run-s \\\n  "lint:check" \\\n  "test:unit" \\\n  "test:integration" \\\n  "security:audit" \\\n  "performance:benchmark"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pattern-based-workflows",children:"Pattern-Based Workflows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Run all test types in sequence\npresetter run-s "test:*"\n\n# Sequential build steps\npresetter run-s "build:**"\n\n# Complex pattern workflow\npresetter run-s \\\n  "clean:**" \\\n  "generate:*" \\\n  "build:**" \\\n  "test:integration"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"environment-specific-pipelines",children:"Environment-Specific Pipelines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Development\npresetter run-s \\\n  "build:dev" \\\n  "test:watch" \\\n  -- --source-maps\n\n# Production\npresetter run-s \\\n  "lint:strict" \\\n  "test:all" \\\n  "build:prod" \\\n  "optimize" \\\n  -- --minify --tree-shake\n\n# Testing\npresetter run-s \\\n  "test:unit" \\\n  "test:integration" \\\n  "test:e2e" \\\n  -- --coverage --reporter html\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-argument-handling",children:"Advanced Argument Handling"}),"\n",(0,r.jsx)(n.h3,{id:"complex-argument-substitution",children:"Complex Argument Substitution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Multiple substitution points\npresetter run-s \\\n  "lint -- {@} --fix" \\\n  "test -- --env test {@}" \\\n  "build -- {@} --analyze" \\\n  -- --verbose --progress --time\n\n# Conditional arguments\npresetter run-s \\\n  "test -- {@} --coverage" \\\n  "build -- {@} $([ "$NODE_ENV" = "production" ] && echo "--minify")" \\\n  -- --verbose\n'})}),"\n",(0,r.jsx)(n.h3,{id:"quote-handling",children:"Quote Handling"}),"\n",(0,r.jsx)(n.p,{children:"Presetter automatically handles quotes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# These are equivalent\npresetter run-s \"test -- --watch\"\npresetter run-s 'test -- --watch'\npresetter run-s test\\ --\\ --watch\n\n# Complex quoting\npresetter run-s \\\n  \"lint -- --ext '.ts,.tsx' --fix\" \\\n  'test -- --testNamePattern=\"integration\"'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-task-generation",children:"Dynamic Task Generation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Generate tasks dynamically\nTASKS=$(ls packages/ | sed \'s/^/build:/\')\npresetter run-s $TASKS\n\n# Conditional task inclusion\nif [ "$CI" = "true" ]; then\n  TASKS="lint test build deploy"\nelse\n  TASKS="lint test build"\nfi\npresetter run-s $TASKS\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"fail-fast-behavior",children:"Fail-Fast Behavior"}),"\n",(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"run-s"})," stops on the first failed task:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# If lint fails, test and build won't run\npresetter run-s lint test build\n\n# Exit codes:\n# 0 - All tasks succeeded\n# Non-zero - First task that failed\n"})}),"\n",(0,r.jsx)(n.h3,{id:"error-recovery",children:"Error Recovery"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Use || to continue on failure\npresetter run-s \\\n  "lint || true" \\\n  "test" \\\n  "build"\n\n# Or handle errors in individual tasks\npresetter run-s \\\n  "lint -- --max-warnings 0 || echo \'Lint failed but continuing\'" \\\n  "test"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"debugging-failed-pipelines",children:"Debugging Failed Pipelines"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Add verbose output\nDEBUG=presetter:* presetter run-s lint test build\n\n# Run with detailed error reporting\npresetter run-s \\\n  "lint -- --format verbose" \\\n  "test -- --verbose" \\\n  "build -- --stats" \\\n  -- --verbose\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"efficient-sequencing",children:"Efficient Sequencing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Good: Logical dependency order\npresetter run-s \\\n  "clean" \\\n  "generate" \\\n  "build" \\\n  "test"\n\n# Avoid: Unnecessary dependencies\n# Don\'t run slow tasks if fast ones might fail\npresetter run-s \\\n  "lint" \\\n  "typecheck" \\\n  "test:unit" \\\n  "test:integration"  # Slowest last\n'})}),"\n",(0,r.jsx)(n.h3,{id:"caching-integration",children:"Caching Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Use cache-aware tasks\npresetter run-s \\\n  "build:cache-check || build:full" \\\n  "test:cache-check || test:full"\n\n# Conditional rebuilds\npresetter run-s \\\n  "build:check-changes" \\\n  "build:incremental" \\\n  "test:affected"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"packagejson-scripts",children:"Package.json Scripts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "ci": "presetter run-s lint test build",\n    "dev": "presetter run-s build:dev test:watch -- --verbose",\n    "release": "presetter run-s lint test build package publish",\n    "precommit": "presetter run-s \'lint -- --staged\' \'test -- --related\'"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/ci.yml\nsteps:\n  - name: Install dependencies\n    run: npm ci\n    \n  - name: Run CI pipeline\n    run: |\n      presetter run-s \\\n        "lint -- --format github" \\\n        "test -- --coverage --reporter github" \\\n        "build -- --mode production" \\\n        -- --verbose\n'})}),"\n",(0,r.jsx)(n.h3,{id:"docker-integration",children:"Docker Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:"# Multi-stage build with sequential tasks\nFROM node:18 AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN presetter run-s lint test build -- --production\n\nFROM node:18-alpine\nCOPY --from=builder /app/dist ./dist\n"})}),"\n",(0,r.jsx)(n.h2,{id:"alternative-direct-binary",children:"Alternative: Direct Binary"}),"\n",(0,r.jsxs)(n.p,{children:["Use the standalone ",(0,r.jsx)(n.code,{children:"run-s"})," binary:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# These are equivalent\npresetter run-s lint test build\nrun-s lint test build\n\n# Both support the same features\nrun-s "lint -- --fix" test build -- --verbose\n'})}),"\n",(0,r.jsx)(n.h2,{id:"comparison-with-run-p",children:"Comparison with run-p"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"run-s (Sequential)"}),(0,r.jsx)(n.th,{children:"run-p (Parallel)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Execution"})}),(0,r.jsx)(n.td,{children:"One after another"}),(0,r.jsx)(n.td,{children:"Simultaneously"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Dependencies"})}),(0,r.jsx)(n.td,{children:"Respects order"}),(0,r.jsx)(n.td,{children:"No dependencies"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Failure"})}),(0,r.jsx)(n.td,{children:"Stops on first"}),(0,r.jsx)(n.td,{children:"Waits for all"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Performance"})}),(0,r.jsx)(n.td,{children:"Slower total time"}),(0,r.jsx)(n.td,{children:"Faster total time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Resource usage"})}),(0,r.jsx)(n.td,{children:"Lower peak usage"}),(0,r.jsx)(n.td,{children:"Higher peak usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Use case"})}),(0,r.jsx)(n.td,{children:"Build pipelines"}),(0,r.jsx)(n.td,{children:"Independent tasks"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"related-commands",children:"Related Commands"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run",children:(0,r.jsx)(n.code,{children:"presetter run"})})})," - Run a single task"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./run-p",children:(0,r.jsx)(n.code,{children:"presetter run-p"})})})," - Run multiple tasks in parallel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./bootstrap",children:(0,r.jsx)(n.code,{children:"presetter bootstrap"})})})," - Setup project configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/getting-started",children:"Getting Started Guide"})," - Basic task execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/introduction/configuration",children:"Configuration Guide"})," - Customizing scripts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/advanced",children:"Advanced Topics"})," - Performance optimization"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);